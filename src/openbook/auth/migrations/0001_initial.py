# Generated by Django 5.2.1 on 2025-05-18 14:51

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import openbook.auth.models.user_profile
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('human', 'Human User'), ('app', 'App User')], default='human', verbose_name='User Type')),
                ('email', models.EmailField(max_length=254, validators=[django.core.validators.EmailValidator], verbose_name='E-Mail Address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'User Group',
                'verbose_name_plural': 'User Groups',
            },
            bases=('auth.group', models.Model),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name='Permission_T',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Translated Name')),
            ],
            options={
                'verbose_name': 'Translated Permission',
                'verbose_name_plural': 'Translated Permissions',
                'ordering': ['parent', 'language'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, verbose_name='Id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modified At')),
                ('scope_uuid', models.UUIDField(verbose_name='Scope UUID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('text_format', models.CharField(choices=[('TEXT', 'Plain Text'), ('HTML', 'HTML'), ('MD', 'Markdown')], default='MD', max_length=10, verbose_name='Text Format')),
                ('slug', models.SlugField(verbose_name='Slug')),
                ('priority', models.PositiveSmallIntegerField(help_text='Low values mean less privileges. Make sure to correctly prioritize the rolls to avoid privilege escalation.', verbose_name='Priority')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='RoleAssignment',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, verbose_name='Id')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Start date and time')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End date and time')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modified At')),
                ('scope_uuid', models.UUIDField(verbose_name='Scope UUID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('assignment_method', models.CharField(choices=[('manual', 'Manual Assignment'), ('self-enrollment', 'Self-Enrollment'), ('access-request', 'Access Request')], max_length=20, verbose_name='Assignment Method')),
            ],
            options={
                'verbose_name': 'Role Assignment',
                'verbose_name_plural': 'Role Assignments',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('picture', models.FileField(blank=True, null=True, upload_to=openbook.auth.models.user_profile.UserProfile._calc_file_path, verbose_name='Profile Picture')),
            ],
        ),
        migrations.CreateModel(
            name='AccessRequest',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, verbose_name='Id')),
                ('duration_period', models.CharField(blank=True, choices=[('minutes', 'Minutes'), ('hours', 'Hours'), ('days', 'Days'), ('weeks', 'Weeks'), ('months', 'Months'), ('years', 'Years')], max_length=10, verbose_name='Duration Period')),
                ('duration_value', models.FloatField(blank=True, verbose_name='Duration Value')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modified At')),
                ('scope_uuid', models.UUIDField(verbose_name='Scope UUID')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Enrollment Ends on')),
                ('decision', models.CharField(choices=[('pending', 'Decision Pending'), ('accepted', 'Accepted'), ('denied', 'Denied')], default='pending', max_length=10, verbose_name='Decision')),
                ('decision_date', models.DateTimeField(blank=True, null=True, verbose_name='Decision Date')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Modified By')),
                ('scope_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype', verbose_name='Scope Type')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_requests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Access Request',
                'verbose_name_plural': 'Access Requests',
            },
        ),
        migrations.CreateModel(
            name='AllowedRolePermission',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, verbose_name='Id')),
                ('permission', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='auth.permission', verbose_name='Permission')),
                ('scope_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype', verbose_name='Scope Type')),
            ],
            options={
                'verbose_name': 'Allowed Role Permission',
                'verbose_name_plural': 'Allowed Role Permissions',
            },
        ),
        migrations.CreateModel(
            name='EnrollmentMethod',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, verbose_name='Id')),
                ('duration_period', models.CharField(blank=True, choices=[('minutes', 'Minutes'), ('hours', 'Hours'), ('days', 'Days'), ('weeks', 'Weeks'), ('months', 'Months'), ('years', 'Years')], max_length=10, verbose_name='Duration Period')),
                ('duration_value', models.FloatField(blank=True, verbose_name='Duration Value')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('modified_at', models.DateTimeField(auto_now=True, verbose_name='Modified At')),
                ('scope_uuid', models.UUIDField(verbose_name='Scope UUID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('text_format', models.CharField(choices=[('TEXT', 'Plain Text'), ('HTML', 'HTML'), ('MD', 'Markdown')], default='MD', max_length=10, verbose_name='Text Format')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Enrollment Ends on')),
                ('passphrase', models.CharField(blank=True, max_length=100, verbose_name='Passphrase')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Modified By')),
                ('scope_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype', verbose_name='Scope Type')),
            ],
            options={
                'verbose_name': 'Enrollment Method',
                'verbose_name_plural': 'Enrollment Methods',
            },
        ),
    ]
