# Generated by Django 5.2.2 on 2025-06-10 00:03

import django.contrib.auth.models
import django.db.models.deletion
import openbook.auth.models.auth_config
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('openbook_auth', '0001_initial'),
        ('openbook_core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AuthConfig',
            fields=[
                ('site', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='auth_config', serialize=False, to='openbook_core.site', verbose_name='Site')),
                ('local_signup_allowed', models.BooleanField(default=True, help_text='This only affects registration of local users without social authentication or federated identities.', verbose_name='Local Sign-Up Allowed')),
                ('signup_email_suffix', models.CharField(blank=True, help_text='This limits local user registration to e-mail addresses ending with a given suffix.', verbose_name='E-Mail Suffix')),
                ('logout_next_url', models.CharField(default='/', help_text='Link on the confirmation page shown after logout.', verbose_name='Next URL after logout')),
                ('signup_image', models.FileField(blank=True, null=True, upload_to=openbook.auth.models.auth_config.AuthConfig._calc_file_path, verbose_name='Sign-Up Page Image')),
                ('login_image', models.FileField(blank=True, null=True, upload_to=openbook.auth.models.auth_config.AuthConfig._calc_file_path, verbose_name='Login Page Image')),
                ('logout_image', models.FileField(blank=True, null=True, upload_to=openbook.auth.models.auth_config.AuthConfig._calc_file_path, verbose_name='Logout Page Image')),
                ('password_reset_image', models.FileField(blank=True, null=True, upload_to=openbook.auth.models.auth_config.AuthConfig._calc_file_path, verbose_name='Password Reset Page Image')),
            ],
            options={
                'verbose_name': 'Authentication Settings',
                'verbose_name_plural': 'Authentication Settings',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('group_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.group')),
                ('slug', models.SlugField(unique=True, verbose_name='Slug')),
            ],
            options={
                'verbose_name': 'User Group',
                'verbose_name_plural': 'User Groups',
            },
            bases=('auth.group', models.Model),
            managers=[
                ('objects', django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='accessrequest',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Created By'),
        ),
        migrations.AddField(
            model_name='accessrequest',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Modified By'),
        ),
        migrations.AddField(
            model_name='accessrequest',
            name='scope_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype', verbose_name='Scope Type'),
        ),
        migrations.AddField(
            model_name='accessrequest',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_requests', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='allowedrolepermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='auth.permission', verbose_name='Permission'),
        ),
        migrations.AddField(
            model_name='allowedrolepermission',
            name='scope_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype', verbose_name='Scope Type'),
        ),
        migrations.AddField(
            model_name='anonymouspermission',
            name='permission',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='auth.permission', verbose_name='Permission'),
        ),
        migrations.CreateModel(
            name='AuthConfigText',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, verbose_name='Id')),
                ('logout_next_text', models.CharField(max_length=255, verbose_name='Link Text after Logout')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='openbook_core.language')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='openbook_auth.authconfig')),
            ],
            options={
                'verbose_name': 'Translation',
                'verbose_name_plural': 'Translations',
                'ordering': ('parent', 'language'),
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='openbook_auth.group', verbose_name='Groups'),
        ),
        migrations.CreateModel(
            name='PermissionText',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, verbose_name='Id')),
                ('name', models.CharField(max_length=255, verbose_name='Translated Name')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='openbook_core.language')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='auth.permission', verbose_name='Permission')),
            ],
            options={
                'verbose_name': 'Translated Permission',
                'verbose_name_plural': 'Translated Permissions',
                'ordering': ('parent', 'language'),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, verbose_name='Id')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created At')),
                ('modified_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Modified At')),
                ('scope_uuid', models.UUIDField(verbose_name='Scope UUID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('text_format', models.CharField(choices=[('TEXT', 'Plain Text'), ('HTML', 'HTML'), ('MD', 'Markdown')], default='MD', max_length=10, verbose_name='Text Format')),
                ('slug', models.SlugField(verbose_name='Slug')),
                ('priority', models.PositiveSmallIntegerField(help_text='Low values mean less privileges. Make sure to correctly prioritize the rolls to avoid privilege escalation.', verbose_name='Priority')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Modified By')),
                ('permissions', models.ManyToManyField(blank=True, related_name='roles', to='auth.permission', verbose_name='Permissions')),
                ('scope_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype', verbose_name='Scope Type')),
            ],
            options={
                'verbose_name': 'Role',
                'verbose_name_plural': 'Roles',
            },
        ),
        migrations.CreateModel(
            name='EnrollmentMethod',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, verbose_name='Id')),
                ('duration_period', models.CharField(blank=True, choices=[('minutes', 'Minutes'), ('hours', 'Hours'), ('days', 'Days'), ('weeks', 'Weeks'), ('months', 'Months'), ('years', 'Years')], max_length=10, verbose_name='Duration Period')),
                ('duration_value', models.FloatField(blank=True, verbose_name='Duration Value')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created At')),
                ('modified_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Modified At')),
                ('scope_uuid', models.UUIDField(verbose_name='Scope UUID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('text_format', models.CharField(choices=[('TEXT', 'Plain Text'), ('HTML', 'HTML'), ('MD', 'Markdown')], default='MD', max_length=10, verbose_name='Text Format')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='Enrollment Ends on')),
                ('passphrase', models.CharField(blank=True, max_length=100, verbose_name='Passphrase')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Modified By')),
                ('scope_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype', verbose_name='Scope Type')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollment_methods', to='openbook_auth.role')),
            ],
            options={
                'verbose_name': 'Enrollment Method',
                'verbose_name_plural': 'Enrollment Methods',
                'permissions': (('self_enroll', 'Can self-enroll in a scope'),),
            },
        ),
        migrations.AddField(
            model_name='accessrequest',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_requests', to='openbook_auth.role'),
        ),
        migrations.CreateModel(
            name='RoleAssignment',
            fields=[
                ('id', models.UUIDField(editable=False, primary_key=True, serialize=False, verbose_name='Id')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Start date and time')),
                ('end_date', models.DateTimeField(blank=True, null=True, verbose_name='End date and time')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created At')),
                ('modified_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Modified At')),
                ('scope_uuid', models.UUIDField(verbose_name='Scope UUID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('assignment_method', models.CharField(choices=[('manual', 'Manual Assignment'), ('self-enrollment', 'Self-Enrollment'), ('access-request', 'Access Request')], default='self-enrollment', max_length=20, verbose_name='Assignment Method')),
                ('access_request', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='role_assignment', to='openbook_auth.accessrequest')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('enrollment_method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='role_assignments', to='openbook_auth.enrollmentmethod')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Modified By')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_assignments', to='openbook_auth.role')),
                ('scope_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='contenttypes.contenttype', verbose_name='Scope Type')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='role_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Role Assignment',
                'verbose_name_plural': 'Role Assignments',
            },
        ),
        migrations.AddIndex(
            model_name='allowedrolepermission',
            index=models.Index(fields=['scope_type'], name='openbook_au_scope_t_8496a5_idx'),
        ),
        migrations.AddConstraint(
            model_name='allowedrolepermission',
            constraint=models.UniqueConstraint(fields=('scope_type', 'permission'), name='unique_allowed_role_permission'),
        ),
        migrations.AddConstraint(
            model_name='anonymouspermission',
            constraint=models.UniqueConstraint(fields=('permission',), name='unique_anonymous_permission'),
        ),
        migrations.AddIndex(
            model_name='authconfigtext',
            index=models.Index(fields=['parent', 'language'], name='openbook_au_parent__c7182c_idx'),
        ),
        migrations.AddConstraint(
            model_name='authconfigtext',
            constraint=models.UniqueConstraint(fields=('parent', 'language'), name='unique_auth_config_translation'),
        ),
        migrations.AddIndex(
            model_name='permissiontext',
            index=models.Index(fields=['parent', 'language'], name='openbook_au_parent__3c9485_idx'),
        ),
        migrations.AddConstraint(
            model_name='permissiontext',
            constraint=models.UniqueConstraint(fields=('parent', 'language'), name='unique_permission_text_translation'),
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['scope_type', 'scope_uuid', 'slug'], name='openbook_au_scope_t_263430_idx'),
        ),
        migrations.AddConstraint(
            model_name='role',
            constraint=models.UniqueConstraint(fields=('scope_type', 'scope_uuid', 'slug'), name='unique_scope_slug'),
        ),
        migrations.AddIndex(
            model_name='enrollmentmethod',
            index=models.Index(fields=['scope_type', 'scope_uuid', 'role'], name='openbook_au_scope_t_6ece9a_idx'),
        ),
        migrations.AddIndex(
            model_name='accessrequest',
            index=models.Index(fields=['scope_type', 'scope_uuid', 'role'], name='openbook_au_scope_t_f1d834_idx'),
        ),
        migrations.AddIndex(
            model_name='accessrequest',
            index=models.Index(fields=['user'], name='user_idx'),
        ),
        migrations.AddIndex(
            model_name='roleassignment',
            index=models.Index(fields=['scope_type', 'scope_uuid', 'role', 'user'], name='openbook_au_scope_t_9e5d52_idx'),
        ),
        migrations.AddIndex(
            model_name='roleassignment',
            index=models.Index(fields=['user'], name='openbook_au_user_id_8e9382_idx'),
        ),
        migrations.AddConstraint(
            model_name='roleassignment',
            constraint=models.UniqueConstraint(fields=('scope_type', 'scope_uuid', 'role', 'user'), name='unique_role_assignment'),
        ),
    ]
