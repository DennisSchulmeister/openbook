/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RoleAssignmentRead } from './RoleAssignmentRead';
import {
    RoleAssignmentReadFromJSON,
    RoleAssignmentReadFromJSONTyped,
    RoleAssignmentReadToJSON,
    RoleAssignmentReadToJSONTyped,
} from './RoleAssignmentRead';
import type { TextFormatEnum } from './TextFormatEnum';
import {
    TextFormatEnumFromJSON,
    TextFormatEnumFromJSONTyped,
    TextFormatEnumToJSON,
    TextFormatEnumToJSONTyped,
} from './TextFormatEnum';
import type { EnrollmentMethodWithRoleRead } from './EnrollmentMethodWithRoleRead';
import {
    EnrollmentMethodWithRoleReadFromJSON,
    EnrollmentMethodWithRoleReadFromJSONTyped,
    EnrollmentMethodWithRoleReadToJSON,
    EnrollmentMethodWithRoleReadToJSONTyped,
} from './EnrollmentMethodWithRoleRead';
import type { UserRead } from './UserRead';
import {
    UserReadFromJSON,
    UserReadFromJSONTyped,
    UserReadToJSON,
    UserReadToJSONTyped,
} from './UserRead';
import type { PermissionRead } from './PermissionRead';
import {
    PermissionReadFromJSON,
    PermissionReadFromJSONTyped,
    PermissionReadToJSON,
    PermissionReadToJSONTyped,
} from './PermissionRead';
import type { AccessRequestWithRoleRead } from './AccessRequestWithRoleRead';
import {
    AccessRequestWithRoleReadFromJSON,
    AccessRequestWithRoleReadFromJSONTyped,
    AccessRequestWithRoleReadToJSON,
    AccessRequestWithRoleReadToJSONTyped,
} from './AccessRequestWithRoleRead';

/**
 * Full list of fields for retrieving a single course.
 * @export
 * @interface Course
 */
export interface Course {
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Course
     */
    description?: string;
    /**
     * 
     * @type {TextFormatEnum}
     * @memberof Course
     */
    textFormat?: TextFormatEnum;
    /**
     * Flag that this course is only used for creating other courses.
     * @type {boolean}
     * @memberof Course
     */
    isTemplate?: boolean;
    /**
     * 
     * @type {UserRead}
     * @memberof Course
     */
    readonly owner: UserRead;
    /**
     * User name
     * @type {string}
     * @memberof Course
     */
    ownerUsername: string;
    /**
     * 
     * @type {Array<PermissionRead>}
     * @memberof Course
     */
    readonly publicPermissions: Array<PermissionRead>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Course
     */
    publicPermissionStrings: Array<string>;
    /**
     * 
     * @type {Array<RoleAssignmentRead>}
     * @memberof Course
     */
    readonly roleAssignments: Array<RoleAssignmentRead>;
    /**
     * 
     * @type {Array<EnrollmentMethodWithRoleRead>}
     * @memberof Course
     */
    readonly enrollmentMethods: Array<EnrollmentMethodWithRoleRead>;
    /**
     * 
     * @type {Array<AccessRequestWithRoleRead>}
     * @memberof Course
     */
    readonly accessRequests: Array<AccessRequestWithRoleRead>;
    /**
     * 
     * @type {UserRead}
     * @memberof Course
     */
    readonly createdBy: UserRead;
    /**
     * 
     * @type {Date}
     * @memberof Course
     */
    readonly createdAt: Date | null;
    /**
     * 
     * @type {UserRead}
     * @memberof Course
     */
    readonly modifiedBy: UserRead;
    /**
     * 
     * @type {Date}
     * @memberof Course
     */
    readonly modifiedAt: Date | null;
}



/**
 * Check if a given object implements the Course interface.
 */
export function instanceOfCourse(value: object): value is Course {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('slug' in value) || value['slug'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('owner' in value) || value['owner'] === undefined) return false;
    if (!('ownerUsername' in value) || value['ownerUsername'] === undefined) return false;
    if (!('publicPermissions' in value) || value['publicPermissions'] === undefined) return false;
    if (!('publicPermissionStrings' in value) || value['publicPermissionStrings'] === undefined) return false;
    if (!('roleAssignments' in value) || value['roleAssignments'] === undefined) return false;
    if (!('enrollmentMethods' in value) || value['enrollmentMethods'] === undefined) return false;
    if (!('accessRequests' in value) || value['accessRequests'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedBy' in value) || value['modifiedBy'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    return true;
}

export function CourseFromJSON(json: any): Course {
    return CourseFromJSONTyped(json, false);
}

export function CourseFromJSONTyped(json: any, ignoreDiscriminator: boolean): Course {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'slug': json['slug'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'textFormat': json['text_format'] == null ? undefined : TextFormatEnumFromJSON(json['text_format']),
        'isTemplate': json['is_template'] == null ? undefined : json['is_template'],
        'owner': UserReadFromJSON(json['owner']),
        'ownerUsername': json['owner_username'],
        'publicPermissions': ((json['public_permissions'] as Array<any>).map(PermissionReadFromJSON)),
        'publicPermissionStrings': json['public_permission_strings'],
        'roleAssignments': ((json['role_assignments'] as Array<any>).map(RoleAssignmentReadFromJSON)),
        'enrollmentMethods': ((json['enrollment_methods'] as Array<any>).map(EnrollmentMethodWithRoleReadFromJSON)),
        'accessRequests': ((json['access_requests'] as Array<any>).map(AccessRequestWithRoleReadFromJSON)),
        'createdBy': UserReadFromJSON(json['created_by']),
        'createdAt': (json['created_at'] == null ? null : new Date(json['created_at'])),
        'modifiedBy': UserReadFromJSON(json['modified_by']),
        'modifiedAt': (json['modified_at'] == null ? null : new Date(json['modified_at'])),
    };
}

export function CourseToJSON(json: any): Course {
    return CourseToJSONTyped(json, false);
}

export function CourseToJSONTyped(value?: Omit<Course, 'id'|'owner'|'public_permissions'|'role_assignments'|'enrollment_methods'|'access_requests'|'created_by'|'created_at'|'modified_by'|'modified_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'slug': value['slug'],
        'name': value['name'],
        'description': value['description'],
        'text_format': TextFormatEnumToJSON(value['textFormat']),
        'is_template': value['isTemplate'],
        'owner_username': value['ownerUsername'],
        'public_permission_strings': value['publicPermissionStrings'],
    };
}

