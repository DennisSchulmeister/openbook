/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserRead } from './UserRead';
import {
    UserReadFromJSON,
    UserReadFromJSONTyped,
    UserReadToJSON,
    UserReadToJSONTyped,
} from './UserRead';
import type { AssignmentMethodEnum } from './AssignmentMethodEnum';
import {
    AssignmentMethodEnumFromJSON,
    AssignmentMethodEnumFromJSONTyped,
    AssignmentMethodEnumToJSON,
    AssignmentMethodEnumToJSONTyped,
} from './AssignmentMethodEnum';
import type { RoleRead } from './RoleRead';
import {
    RoleReadFromJSON,
    RoleReadFromJSONTyped,
    RoleReadToJSON,
    RoleReadToJSONTyped,
} from './RoleRead';

/**
 * Very short overview of only the very most important role assignment fields to be
 * embedded in parent models.
 * @export
 * @interface RoleAssignmentRead
 */
export interface RoleAssignmentRead {
    /**
     * 
     * @type {string}
     * @memberof RoleAssignmentRead
     */
    readonly id: string;
    /**
     * 
     * @type {RoleRead}
     * @memberof RoleAssignmentRead
     */
    readonly role: RoleRead;
    /**
     * 
     * @type {UserRead}
     * @memberof RoleAssignmentRead
     */
    readonly user: UserRead;
    /**
     * 
     * @type {AssignmentMethodEnum}
     * @memberof RoleAssignmentRead
     */
    readonly assignmentMethod: AssignmentMethodEnum;
    /**
     * 
     * @type {boolean}
     * @memberof RoleAssignmentRead
     */
    readonly isActive: boolean;
}



/**
 * Check if a given object implements the RoleAssignmentRead interface.
 */
export function instanceOfRoleAssignmentRead(value: object): value is RoleAssignmentRead {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('user' in value) || value['user'] === undefined) return false;
    if (!('assignmentMethod' in value) || value['assignmentMethod'] === undefined) return false;
    if (!('isActive' in value) || value['isActive'] === undefined) return false;
    return true;
}

export function RoleAssignmentReadFromJSON(json: any): RoleAssignmentRead {
    return RoleAssignmentReadFromJSONTyped(json, false);
}

export function RoleAssignmentReadFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoleAssignmentRead {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'role': RoleReadFromJSON(json['role']),
        'user': UserReadFromJSON(json['user']),
        'assignmentMethod': AssignmentMethodEnumFromJSON(json['assignment_method']),
        'isActive': json['is_active'],
    };
}

export function RoleAssignmentReadToJSON(json: any): RoleAssignmentRead {
    return RoleAssignmentReadToJSONTyped(json, false);
}

export function RoleAssignmentReadToJSONTyped(value?: Omit<RoleAssignmentRead, 'id'|'role'|'user'|'assignment_method'|'is_active'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
    };
}

