/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Nested } from './Nested';
import {
    NestedFromJSON,
    NestedFromJSONTyped,
    NestedToJSON,
    NestedToJSONTyped,
} from './Nested';
import type { Permission } from './Permission';
import {
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
    PermissionToJSONTyped,
} from './Permission';

/**
 * Reuse full cleaning and validation logic on the model's in the REST API, including
 * `full_clean()`, `clean()`, field validation and uniqueness checks. Also make sure,
 * that the pre-filled model instance can be accessed in the DRF view.
 * @export
 * @interface Role
 */
export interface Role {
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    readonly id: string;
    /**
     * 
     * @type {Nested}
     * @memberof Role
     */
    readonly scopeType: Nested;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    scopeUuid: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Role
     */
    textFormat?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Role
     */
    isActive?: boolean;
    /**
     * Low values mean less privileges. Make sure to correctly prioritize the rolls to avoid privilege escalation.
     * @type {number}
     * @memberof Role
     */
    priority: number;
    /**
     * 
     * @type {Permission}
     * @memberof Role
     */
    permissions: Permission;
    /**
     * 
     * @type {Nested}
     * @memberof Role
     */
    readonly createdBy: Nested;
    /**
     * 
     * @type {Date}
     * @memberof Role
     */
    readonly createdAt: Date;
    /**
     * 
     * @type {Nested}
     * @memberof Role
     */
    readonly modifiedBy: Nested;
    /**
     * 
     * @type {Date}
     * @memberof Role
     */
    readonly modifiedAt: Date;
}

/**
 * Check if a given object implements the Role interface.
 */
export function instanceOfRole(value: object): value is Role {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('scopeType' in value) || value['scopeType'] === undefined) return false;
    if (!('scopeUuid' in value) || value['scopeUuid'] === undefined) return false;
    if (!('slug' in value) || value['slug'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('priority' in value) || value['priority'] === undefined) return false;
    if (!('permissions' in value) || value['permissions'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedBy' in value) || value['modifiedBy'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    return true;
}

export function RoleFromJSON(json: any): Role {
    return RoleFromJSONTyped(json, false);
}

export function RoleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Role {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'scopeType': NestedFromJSON(json['scope_type']),
        'scopeUuid': json['scope_uuid'],
        'slug': json['slug'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'textFormat': json['text_format'] == null ? undefined : json['text_format'],
        'isActive': json['is_active'] == null ? undefined : json['is_active'],
        'priority': json['priority'],
        'permissions': PermissionFromJSON(json['permissions']),
        'createdBy': NestedFromJSON(json['created_by']),
        'createdAt': (new Date(json['created_at'])),
        'modifiedBy': NestedFromJSON(json['modified_by']),
        'modifiedAt': (new Date(json['modified_at'])),
    };
}

export function RoleToJSON(json: any): Role {
    return RoleToJSONTyped(json, false);
}

export function RoleToJSONTyped(value?: Omit<Role, 'id'|'scope_type'|'created_by'|'created_at'|'modified_by'|'modified_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'scope_uuid': value['scopeUuid'],
        'slug': value['slug'],
        'name': value['name'],
        'description': value['description'],
        'text_format': value['textFormat'],
        'is_active': value['isActive'],
        'priority': value['priority'],
        'permissions': PermissionToJSON(value['permissions']),
    };
}

