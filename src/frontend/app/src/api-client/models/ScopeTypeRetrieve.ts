/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ScopeObject } from './ScopeObject';
import {
    ScopeObjectFromJSON,
    ScopeObjectFromJSONTyped,
    ScopeObjectToJSON,
    ScopeObjectToJSONTyped,
} from './ScopeObject';
import type { AllowedPermission } from './AllowedPermission';
import {
    AllowedPermissionFromJSON,
    AllowedPermissionFromJSONTyped,
    AllowedPermissionToJSON,
    AllowedPermissionToJSONTyped,
} from './AllowedPermission';

/**
 * 
 * @export
 * @interface ScopeTypeRetrieve
 */
export interface ScopeTypeRetrieve {
    /**
     * 
     * @type {number}
     * @memberof ScopeTypeRetrieve
     */
    pk: number;
    /**
     * 
     * @type {string}
     * @memberof ScopeTypeRetrieve
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ScopeTypeRetrieve
     */
    label: string;
    /**
     * 
     * @type {Array<ScopeObject>}
     * @memberof ScopeTypeRetrieve
     */
    objects?: Array<ScopeObject>;
    /**
     * 
     * @type {Array<AllowedPermission>}
     * @memberof ScopeTypeRetrieve
     */
    allowedPermissions?: Array<AllowedPermission>;
}

/**
 * Check if a given object implements the ScopeTypeRetrieve interface.
 */
export function instanceOfScopeTypeRetrieve(value: object): value is ScopeTypeRetrieve {
    if (!('pk' in value) || value['pk'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('label' in value) || value['label'] === undefined) return false;
    return true;
}

export function ScopeTypeRetrieveFromJSON(json: any): ScopeTypeRetrieve {
    return ScopeTypeRetrieveFromJSONTyped(json, false);
}

export function ScopeTypeRetrieveFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScopeTypeRetrieve {
    if (json == null) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'id': json['id'],
        'label': json['label'],
        'objects': json['objects'] == null ? undefined : ((json['objects'] as Array<any>).map(ScopeObjectFromJSON)),
        'allowedPermissions': json['allowed_permissions'] == null ? undefined : ((json['allowed_permissions'] as Array<any>).map(AllowedPermissionFromJSON)),
    };
}

export function ScopeTypeRetrieveToJSON(json: any): ScopeTypeRetrieve {
    return ScopeTypeRetrieveToJSONTyped(json, false);
}

export function ScopeTypeRetrieveToJSONTyped(value?: ScopeTypeRetrieve | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'pk': value['pk'],
        'id': value['id'],
        'label': value['label'],
        'objects': value['objects'] == null ? undefined : ((value['objects'] as Array<any>).map(ScopeObjectToJSON)),
        'allowed_permissions': value['allowedPermissions'] == null ? undefined : ((value['allowedPermissions'] as Array<any>).map(AllowedPermissionToJSON)),
    };
}

