/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserRead } from './UserRead';
import {
    UserReadFromJSON,
    UserReadFromJSONTyped,
    UserReadToJSON,
    UserReadToJSONTyped,
} from './UserRead';

/**
 * Reduced list of fields for getting a list of roles.
 * @export
 * @interface RoleList
 */
export interface RoleList {
    /**
     * 
     * @type {string}
     * @memberof RoleList
     */
    readonly id: string;
    /**
     * 
     * @type {string}
     * @memberof RoleList
     */
    readonly slug: string;
    /**
     * 
     * @type {string}
     * @memberof RoleList
     */
    scopeType: string;
    /**
     * 
     * @type {string}
     * @memberof RoleList
     */
    readonly scopeUuid: string;
    /**
     * 
     * @type {string}
     * @memberof RoleList
     */
    readonly name: string;
    /**
     * 
     * @type {boolean}
     * @memberof RoleList
     */
    readonly isActive: boolean;
    /**
     * Low values mean less privileges. Make sure to correctly prioritize the rolls to avoid privilege escalation.
     * @type {number}
     * @memberof RoleList
     */
    readonly priority: number;
    /**
     * 
     * @type {UserRead}
     * @memberof RoleList
     */
    readonly createdBy: UserRead;
    /**
     * 
     * @type {Date}
     * @memberof RoleList
     */
    readonly createdAt: Date | null;
    /**
     * 
     * @type {UserRead}
     * @memberof RoleList
     */
    readonly modifiedBy: UserRead;
    /**
     * 
     * @type {Date}
     * @memberof RoleList
     */
    readonly modifiedAt: Date | null;
}

/**
 * Check if a given object implements the RoleList interface.
 */
export function instanceOfRoleList(value: object): value is RoleList {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('slug' in value) || value['slug'] === undefined) return false;
    if (!('scopeType' in value) || value['scopeType'] === undefined) return false;
    if (!('scopeUuid' in value) || value['scopeUuid'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('isActive' in value) || value['isActive'] === undefined) return false;
    if (!('priority' in value) || value['priority'] === undefined) return false;
    if (!('createdBy' in value) || value['createdBy'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('modifiedBy' in value) || value['modifiedBy'] === undefined) return false;
    if (!('modifiedAt' in value) || value['modifiedAt'] === undefined) return false;
    return true;
}

export function RoleListFromJSON(json: any): RoleList {
    return RoleListFromJSONTyped(json, false);
}

export function RoleListFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoleList {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'slug': json['slug'],
        'scopeType': json['scope_type'],
        'scopeUuid': json['scope_uuid'],
        'name': json['name'],
        'isActive': json['is_active'],
        'priority': json['priority'],
        'createdBy': UserReadFromJSON(json['created_by']),
        'createdAt': (json['created_at'] == null ? null : new Date(json['created_at'])),
        'modifiedBy': UserReadFromJSON(json['modified_by']),
        'modifiedAt': (json['modified_at'] == null ? null : new Date(json['modified_at'])),
    };
}

export function RoleListToJSON(json: any): RoleList {
    return RoleListToJSONTyped(json, false);
}

export function RoleListToJSONTyped(value?: Omit<RoleList, 'id'|'slug'|'scope_uuid'|'name'|'is_active'|'priority'|'created_by'|'created_at'|'modified_by'|'modified_at'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'scope_type': value['scopeType'],
    };
}

