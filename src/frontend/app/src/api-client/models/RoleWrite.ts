/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Permission } from './Permission';
import {
    PermissionFromJSON,
    PermissionFromJSONTyped,
    PermissionToJSON,
    PermissionToJSONTyped,
} from './Permission';

/**
 * Reduced list of fields for creating and updating a role.
 * @export
 * @interface RoleWrite
 */
export interface RoleWrite {
    /**
     * 
     * @type {number}
     * @memberof RoleWrite
     */
    scopeType: number;
    /**
     * 
     * @type {string}
     * @memberof RoleWrite
     */
    scopeUuid: string;
    /**
     * 
     * @type {string}
     * @memberof RoleWrite
     */
    slug: string;
    /**
     * 
     * @type {string}
     * @memberof RoleWrite
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RoleWrite
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof RoleWrite
     */
    textFormat?: string;
    /**
     * Low values mean less privileges. Make sure to correctly prioritize the rolls to avoid privilege escalation.
     * @type {number}
     * @memberof RoleWrite
     */
    priority: number;
    /**
     * 
     * @type {boolean}
     * @memberof RoleWrite
     */
    isActive?: boolean;
    /**
     * 
     * @type {Array<Permission>}
     * @memberof RoleWrite
     */
    permissions: Array<Permission>;
}

/**
 * Check if a given object implements the RoleWrite interface.
 */
export function instanceOfRoleWrite(value: object): value is RoleWrite {
    if (!('scopeType' in value) || value['scopeType'] === undefined) return false;
    if (!('scopeUuid' in value) || value['scopeUuid'] === undefined) return false;
    if (!('slug' in value) || value['slug'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('priority' in value) || value['priority'] === undefined) return false;
    if (!('permissions' in value) || value['permissions'] === undefined) return false;
    return true;
}

export function RoleWriteFromJSON(json: any): RoleWrite {
    return RoleWriteFromJSONTyped(json, false);
}

export function RoleWriteFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoleWrite {
    if (json == null) {
        return json;
    }
    return {
        
        'scopeType': json['scope_type'],
        'scopeUuid': json['scope_uuid'],
        'slug': json['slug'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'textFormat': json['text_format'] == null ? undefined : json['text_format'],
        'priority': json['priority'],
        'isActive': json['is_active'] == null ? undefined : json['is_active'],
        'permissions': ((json['permissions'] as Array<any>).map(PermissionFromJSON)),
    };
}

export function RoleWriteToJSON(json: any): RoleWrite {
    return RoleWriteToJSONTyped(json, false);
}

export function RoleWriteToJSONTyped(value?: RoleWrite | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'scope_type': value['scopeType'],
        'scope_uuid': value['scopeUuid'],
        'slug': value['slug'],
        'name': value['name'],
        'description': value['description'],
        'text_format': value['textFormat'],
        'priority': value['priority'],
        'is_active': value['isActive'],
        'permissions': ((value['permissions'] as Array<any>).map(PermissionToJSON)),
    };
}

