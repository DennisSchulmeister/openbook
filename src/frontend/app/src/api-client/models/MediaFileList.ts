/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Reuse full cleaning and validation logic of the models in the REST API, including
 * `full_clean()`, `clean()`, field validation and uniqueness checks. Also make sure,
 * that the pre-filled model instance can be accessed in the DRF view.
 * ```
 * @export
 * @interface MediaFileList
 */
export interface MediaFileList {
    /**
     * 
     * @type {number}
     * @memberof MediaFileList
     */
    contentType: number;
    /**
     * 
     * @type {string}
     * @memberof MediaFileList
     */
    objectId: string;
    /**
     * 
     * @type {string}
     * @memberof MediaFileList
     */
    fileName?: string;
    /**
     * 
     * @type {number}
     * @memberof MediaFileList
     */
    fileSize?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MediaFileList
     */
    mimeType: string;
}

/**
 * Check if a given object implements the MediaFileList interface.
 */
export function instanceOfMediaFileList(value: object): value is MediaFileList {
    if (!('contentType' in value) || value['contentType'] === undefined) return false;
    if (!('objectId' in value) || value['objectId'] === undefined) return false;
    if (!('mimeType' in value) || value['mimeType'] === undefined) return false;
    return true;
}

export function MediaFileListFromJSON(json: any): MediaFileList {
    return MediaFileListFromJSONTyped(json, false);
}

export function MediaFileListFromJSONTyped(json: any, ignoreDiscriminator: boolean): MediaFileList {
    if (json == null) {
        return json;
    }
    return {
        
        'contentType': json['content_type'],
        'objectId': json['object_id'],
        'fileName': json['file_name'] == null ? undefined : json['file_name'],
        'fileSize': json['file_size'] == null ? undefined : json['file_size'],
        'mimeType': json['mime_type'],
    };
}

export function MediaFileListToJSON(json: any): MediaFileList {
    return MediaFileListToJSONTyped(json, false);
}

export function MediaFileListToJSONTyped(value?: MediaFileList | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'content_type': value['contentType'],
        'object_id': value['objectId'],
        'file_name': value['fileName'],
        'file_size': value['fileSize'],
        'mime_type': value['mimeType'],
    };
}

