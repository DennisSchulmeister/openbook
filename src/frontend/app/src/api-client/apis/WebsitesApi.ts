/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HealthResponse,
  PaginatedSiteList,
  Site,
} from '../models/index';
import {
    HealthResponseFromJSON,
    HealthResponseToJSON,
    PaginatedSiteListFromJSON,
    PaginatedSiteListToJSON,
    SiteFromJSON,
    SiteToJSON,
} from '../models/index';

export interface CoreSitesListRequest {
    page?: number;
    pageSize?: number;
    search?: string;
    sort?: string;
    domain?: string;
    name?: string;
    shortName?: string;
}

export interface CoreSitesRetrieveRequest {
    id: number;
}

/**
 * 
 */
export class WebsitesApi extends runtime.BaseAPI {

    /**
     * Return a simple health status that the API is up and running.
     * Health Status
     */
    async coreSitesHealthRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/core/sites/health/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthResponseFromJSON(jsonValue));
    }

    /**
     * Return a simple health status that the API is up and running.
     * Health Status
     */
    async coreSitesHealthRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthResponse> {
        const response = await this.coreSitesHealthRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * General Website Settings
     * List
     */
    async coreSitesListRaw(requestParameters: CoreSitesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSiteList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['_page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['_page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['domain'] != null) {
            queryParameters['domain'] = requestParameters['domain'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['shortName'] != null) {
            queryParameters['short_name'] = requestParameters['shortName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/core/sites/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSiteListFromJSON(jsonValue));
    }

    /**
     * General Website Settings
     * List
     */
    async coreSitesList(requestParameters: CoreSitesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSiteList> {
        const response = await this.coreSitesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * General Website Settings
     * Retrieve
     */
    async coreSitesRetrieveRaw(requestParameters: CoreSitesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreSitesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/core/sites/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }

    /**
     * General Website Settings
     * Retrieve
     */
    async coreSitesRetrieve(requestParameters: CoreSitesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Site> {
        const response = await this.coreSitesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
