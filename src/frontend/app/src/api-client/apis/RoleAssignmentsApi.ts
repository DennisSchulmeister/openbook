/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedRoleAssignmentList,
  PatchedRoleAssignment,
  RoleAssignment,
} from '../models/index';
import {
    PaginatedRoleAssignmentListFromJSON,
    PaginatedRoleAssignmentListToJSON,
    PatchedRoleAssignmentFromJSON,
    PatchedRoleAssignmentToJSON,
    RoleAssignmentFromJSON,
    RoleAssignmentToJSON,
} from '../models/index';

export interface AuthRoleAssignmentsCreateRequest {
    roleAssignment: Omit<RoleAssignment, 'id'|'created_by'|'created_at'|'modified_by'|'modified_at'>;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface AuthRoleAssignmentsDestroyRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface AuthRoleAssignmentsListRequest {
    expand?: string;
    fields?: string;
    omit?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    sort?: string;
    createdAt?: Date;
    createdAtGte?: Date;
    createdAtLte?: Date;
    createdBy?: string;
    endDate?: Date;
    endDateGte?: Date;
    endDateLte?: Date;
    isActive?: boolean;
    modifiedAt?: Date;
    modifiedAtGte?: Date;
    modifiedAtLte?: Date;
    modifiedBy?: string;
    role?: string;
    scopeType?: number;
    scopeUuid?: string;
    startDate?: Date;
    startDateGte?: Date;
    startDateLte?: Date;
    user?: string;
}

export interface AuthRoleAssignmentsPartialUpdateRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
    patchedRoleAssignment?: Omit<PatchedRoleAssignment, 'id'|'created_by'|'created_at'|'modified_by'|'modified_at'>;
}

export interface AuthRoleAssignmentsRetrieveRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface AuthRoleAssignmentsUpdateRequest {
    id: string;
    roleAssignment: Omit<RoleAssignment, 'id'|'created_by'|'created_at'|'modified_by'|'modified_at'>;
    expand?: string;
    fields?: string;
    omit?: string;
}

/**
 * 
 */
export class RoleAssignmentsApi extends runtime.BaseAPI {

    /**
     * Users and their roles in a scope
     * Create
     */
    async authRoleAssignmentsCreateRaw(requestParameters: AuthRoleAssignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleAssignment>> {
        if (requestParameters['roleAssignment'] == null) {
            throw new runtime.RequiredError(
                'roleAssignment',
                'Required parameter "roleAssignment" was null or undefined when calling authRoleAssignmentsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/role_assignments/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleAssignmentToJSON(requestParameters['roleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Users and their roles in a scope
     * Create
     */
    async authRoleAssignmentsCreate(requestParameters: AuthRoleAssignmentsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleAssignment> {
        const response = await this.authRoleAssignmentsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Users and their roles in a scope
     * Delete
     */
    async authRoleAssignmentsDestroyRaw(requestParameters: AuthRoleAssignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authRoleAssignmentsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/role_assignments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Users and their roles in a scope
     * Delete
     */
    async authRoleAssignmentsDestroy(requestParameters: AuthRoleAssignmentsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authRoleAssignmentsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Users and their roles in a scope
     * List
     */
    async authRoleAssignmentsListRaw(requestParameters: AuthRoleAssignmentsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRoleAssignmentList>> {
        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['_page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['_page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (requestParameters['createdAtGte'] != null) {
            queryParameters['created_at__gte'] = (requestParameters['createdAtGte'] as any).toISOString();
        }

        if (requestParameters['createdAtLte'] != null) {
            queryParameters['created_at__lte'] = (requestParameters['createdAtLte'] as any).toISOString();
        }

        if (requestParameters['createdBy'] != null) {
            queryParameters['created_by'] = requestParameters['createdBy'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['endDateGte'] != null) {
            queryParameters['end_date__gte'] = (requestParameters['endDateGte'] as any).toISOString();
        }

        if (requestParameters['endDateLte'] != null) {
            queryParameters['end_date__lte'] = (requestParameters['endDateLte'] as any).toISOString();
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['is_active'] = requestParameters['isActive'];
        }

        if (requestParameters['modifiedAt'] != null) {
            queryParameters['modified_at'] = (requestParameters['modifiedAt'] as any).toISOString();
        }

        if (requestParameters['modifiedAtGte'] != null) {
            queryParameters['modified_at__gte'] = (requestParameters['modifiedAtGte'] as any).toISOString();
        }

        if (requestParameters['modifiedAtLte'] != null) {
            queryParameters['modified_at__lte'] = (requestParameters['modifiedAtLte'] as any).toISOString();
        }

        if (requestParameters['modifiedBy'] != null) {
            queryParameters['modified_by'] = requestParameters['modifiedBy'];
        }

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }

        if (requestParameters['scopeType'] != null) {
            queryParameters['scope_type'] = requestParameters['scopeType'];
        }

        if (requestParameters['scopeUuid'] != null) {
            queryParameters['scope_uuid'] = requestParameters['scopeUuid'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['startDateGte'] != null) {
            queryParameters['start_date__gte'] = (requestParameters['startDateGte'] as any).toISOString();
        }

        if (requestParameters['startDateLte'] != null) {
            queryParameters['start_date__lte'] = (requestParameters['startDateLte'] as any).toISOString();
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/role_assignments/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRoleAssignmentListFromJSON(jsonValue));
    }

    /**
     * Users and their roles in a scope
     * List
     */
    async authRoleAssignmentsList(requestParameters: AuthRoleAssignmentsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRoleAssignmentList> {
        const response = await this.authRoleAssignmentsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Users and their roles in a scope
     * Partial Update
     */
    async authRoleAssignmentsPartialUpdateRaw(requestParameters: AuthRoleAssignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authRoleAssignmentsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/role_assignments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRoleAssignmentToJSON(requestParameters['patchedRoleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Users and their roles in a scope
     * Partial Update
     */
    async authRoleAssignmentsPartialUpdate(requestParameters: AuthRoleAssignmentsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleAssignment> {
        const response = await this.authRoleAssignmentsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Users and their roles in a scope
     * Retrieve
     */
    async authRoleAssignmentsRetrieveRaw(requestParameters: AuthRoleAssignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authRoleAssignmentsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/role_assignments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Users and their roles in a scope
     * Retrieve
     */
    async authRoleAssignmentsRetrieve(requestParameters: AuthRoleAssignmentsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleAssignment> {
        const response = await this.authRoleAssignmentsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Users and their roles in a scope
     * Update
     */
    async authRoleAssignmentsUpdateRaw(requestParameters: AuthRoleAssignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RoleAssignment>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authRoleAssignmentsUpdate().'
            );
        }

        if (requestParameters['roleAssignment'] == null) {
            throw new runtime.RequiredError(
                'roleAssignment',
                'Required parameter "roleAssignment" was null or undefined when calling authRoleAssignmentsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/role_assignments/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleAssignmentToJSON(requestParameters['roleAssignment']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleAssignmentFromJSON(jsonValue));
    }

    /**
     * Users and their roles in a scope
     * Update
     */
    async authRoleAssignmentsUpdate(requestParameters: AuthRoleAssignmentsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RoleAssignment> {
        const response = await this.authRoleAssignmentsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
