/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedPermissionTList,
  PermissionT,
} from '../models/index';
import {
    PaginatedPermissionTListFromJSON,
    PaginatedPermissionTListToJSON,
    PermissionTFromJSON,
    PermissionTToJSON,
} from '../models/index';

export interface AuthPermissionsListRequest {
    page?: number;
    pageSize?: number;
    search?: string;
    sort?: string;
    app?: string;
    codename?: string;
    language?: string;
    model?: string;
    name?: string;
    permString?: string;
}

export interface AuthPermissionsRetrieveRequest {
    id: string;
}

/**
 * 
 */
export class TranslatedPermissionsApi extends runtime.BaseAPI {

    /**
     * Translated Permissions
     * List
     */
    async authPermissionsListRaw(requestParameters: AuthPermissionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPermissionTList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['_page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['_page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['app'] != null) {
            queryParameters['app'] = requestParameters['app'];
        }

        if (requestParameters['codename'] != null) {
            queryParameters['codename'] = requestParameters['codename'];
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['model'] != null) {
            queryParameters['model'] = requestParameters['model'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['permString'] != null) {
            queryParameters['perm_string'] = requestParameters['permString'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/permissions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPermissionTListFromJSON(jsonValue));
    }

    /**
     * Translated Permissions
     * List
     */
    async authPermissionsList(requestParameters: AuthPermissionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPermissionTList> {
        const response = await this.authPermissionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Translated Permissions
     * Retrieve
     */
    async authPermissionsRetrieveRaw(requestParameters: AuthPermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PermissionT>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authPermissionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/permissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PermissionTFromJSON(jsonValue));
    }

    /**
     * Translated Permissions
     * Retrieve
     */
    async authPermissionsRetrieve(requestParameters: AuthPermissionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PermissionT> {
        const response = await this.authPermissionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
