/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTMLLibraryVersion,
  PaginatedHTMLLibraryVersionList,
} from '../models/index';
import {
    HTMLLibraryVersionFromJSON,
    HTMLLibraryVersionToJSON,
    PaginatedHTMLLibraryVersionListFromJSON,
    PaginatedHTMLLibraryVersionListToJSON,
} from '../models/index';

export interface CoreHtmlLibraryVersionsListRequest {
    expand?: string;
    fields?: string;
    omit?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    sort?: string;
    createdAt?: Date;
    createdAtGte?: Date;
    createdAtLte?: Date;
    createdBy?: number;
    modifiedAt?: Date;
    modifiedAtGte?: Date;
    modifiedAtLte?: Date;
    modifiedBy?: number;
    parentAuthorIcontains?: string;
    parentId?: string;
    parentNameIcontains?: string;
    parentOrganizationIcontains?: string;
    versionIcontains?: string;
}

export interface CoreHtmlLibraryVersionsRetrieveRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

/**
 * 
 */
export class HTMLLibraryVersionsApi extends runtime.BaseAPI {

    /**
     * HTML Library Versions
     * List
     */
    async coreHtmlLibraryVersionsListRaw(requestParameters: CoreHtmlLibraryVersionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedHTMLLibraryVersionList>> {
        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['_page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['_page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (requestParameters['createdAtGte'] != null) {
            queryParameters['created_at__gte'] = (requestParameters['createdAtGte'] as any).toISOString();
        }

        if (requestParameters['createdAtLte'] != null) {
            queryParameters['created_at__lte'] = (requestParameters['createdAtLte'] as any).toISOString();
        }

        if (requestParameters['createdBy'] != null) {
            queryParameters['created_by'] = requestParameters['createdBy'];
        }

        if (requestParameters['modifiedAt'] != null) {
            queryParameters['modified_at'] = (requestParameters['modifiedAt'] as any).toISOString();
        }

        if (requestParameters['modifiedAtGte'] != null) {
            queryParameters['modified_at__gte'] = (requestParameters['modifiedAtGte'] as any).toISOString();
        }

        if (requestParameters['modifiedAtLte'] != null) {
            queryParameters['modified_at__lte'] = (requestParameters['modifiedAtLte'] as any).toISOString();
        }

        if (requestParameters['modifiedBy'] != null) {
            queryParameters['modified_by'] = requestParameters['modifiedBy'];
        }

        if (requestParameters['parentAuthorIcontains'] != null) {
            queryParameters['parent__author__icontains'] = requestParameters['parentAuthorIcontains'];
        }

        if (requestParameters['parentId'] != null) {
            queryParameters['parent__id'] = requestParameters['parentId'];
        }

        if (requestParameters['parentNameIcontains'] != null) {
            queryParameters['parent__name__icontains'] = requestParameters['parentNameIcontains'];
        }

        if (requestParameters['parentOrganizationIcontains'] != null) {
            queryParameters['parent__organization__icontains'] = requestParameters['parentOrganizationIcontains'];
        }

        if (requestParameters['versionIcontains'] != null) {
            queryParameters['version__icontains'] = requestParameters['versionIcontains'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/versions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedHTMLLibraryVersionListFromJSON(jsonValue));
    }

    /**
     * HTML Library Versions
     * List
     */
    async coreHtmlLibraryVersionsList(requestParameters: CoreHtmlLibraryVersionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedHTMLLibraryVersionList> {
        const response = await this.coreHtmlLibraryVersionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Library Versions
     * Retrieve
     */
    async coreHtmlLibraryVersionsRetrieveRaw(requestParameters: CoreHtmlLibraryVersionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLLibraryVersion>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryVersionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/versions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLLibraryVersionFromJSON(jsonValue));
    }

    /**
     * HTML Library Versions
     * Retrieve
     */
    async coreHtmlLibraryVersionsRetrieve(requestParameters: CoreHtmlLibraryVersionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLLibraryVersion> {
        const response = await this.coreHtmlLibraryVersionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
