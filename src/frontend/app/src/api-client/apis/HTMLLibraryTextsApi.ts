/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTMLLibraryText,
  PaginatedHTMLLibraryTextList,
  PatchedHTMLLibraryText,
} from '../models/index';
import {
    HTMLLibraryTextFromJSON,
    HTMLLibraryTextToJSON,
    PaginatedHTMLLibraryTextListFromJSON,
    PaginatedHTMLLibraryTextListToJSON,
    PatchedHTMLLibraryTextFromJSON,
    PatchedHTMLLibraryTextToJSON,
} from '../models/index';

export interface CoreHtmlLibraryTextsCreateRequest {
    hTMLLibraryText: Omit<HTMLLibraryText, 'id'>;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface CoreHtmlLibraryTextsDestroyRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface CoreHtmlLibraryTextsListRequest {
    expand?: string;
    fields?: string;
    omit?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    sort?: string;
    language?: string;
    parentAuthorIcontains?: string;
    parentId?: string;
    parentNameIcontains?: string;
    parentOrganizationIcontains?: string;
    shortDescriptionIcontains?: string;
}

export interface CoreHtmlLibraryTextsPartialUpdateRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
    patchedHTMLLibraryText?: Omit<PatchedHTMLLibraryText, 'id'>;
}

export interface CoreHtmlLibraryTextsRetrieveRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface CoreHtmlLibraryTextsUpdateRequest {
    id: string;
    hTMLLibraryText: Omit<HTMLLibraryText, 'id'>;
    expand?: string;
    fields?: string;
    omit?: string;
}

/**
 * 
 */
export class HTMLLibraryTextsApi extends runtime.BaseAPI {

    /**
     * HTML Libraries Texts
     * Create
     */
    async coreHtmlLibraryTextsCreateRaw(requestParameters: CoreHtmlLibraryTextsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLLibraryText>> {
        if (requestParameters['hTMLLibraryText'] == null) {
            throw new runtime.RequiredError(
                'hTMLLibraryText',
                'Required parameter "hTMLLibraryText" was null or undefined when calling coreHtmlLibraryTextsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/texts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HTMLLibraryTextToJSON(requestParameters['hTMLLibraryText']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLLibraryTextFromJSON(jsonValue));
    }

    /**
     * HTML Libraries Texts
     * Create
     */
    async coreHtmlLibraryTextsCreate(requestParameters: CoreHtmlLibraryTextsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLLibraryText> {
        const response = await this.coreHtmlLibraryTextsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Libraries Texts
     * Delete
     */
    async coreHtmlLibraryTextsDestroyRaw(requestParameters: CoreHtmlLibraryTextsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryTextsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/texts/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * HTML Libraries Texts
     * Delete
     */
    async coreHtmlLibraryTextsDestroy(requestParameters: CoreHtmlLibraryTextsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.coreHtmlLibraryTextsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * HTML Libraries Texts
     * List
     */
    async coreHtmlLibraryTextsListRaw(requestParameters: CoreHtmlLibraryTextsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedHTMLLibraryTextList>> {
        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['_page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['_page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['parentAuthorIcontains'] != null) {
            queryParameters['parent__author__icontains'] = requestParameters['parentAuthorIcontains'];
        }

        if (requestParameters['parentId'] != null) {
            queryParameters['parent__id'] = requestParameters['parentId'];
        }

        if (requestParameters['parentNameIcontains'] != null) {
            queryParameters['parent__name__icontains'] = requestParameters['parentNameIcontains'];
        }

        if (requestParameters['parentOrganizationIcontains'] != null) {
            queryParameters['parent__organization__icontains'] = requestParameters['parentOrganizationIcontains'];
        }

        if (requestParameters['shortDescriptionIcontains'] != null) {
            queryParameters['short_description__icontains'] = requestParameters['shortDescriptionIcontains'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/texts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedHTMLLibraryTextListFromJSON(jsonValue));
    }

    /**
     * HTML Libraries Texts
     * List
     */
    async coreHtmlLibraryTextsList(requestParameters: CoreHtmlLibraryTextsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedHTMLLibraryTextList> {
        const response = await this.coreHtmlLibraryTextsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Libraries Texts
     * Partial Update
     */
    async coreHtmlLibraryTextsPartialUpdateRaw(requestParameters: CoreHtmlLibraryTextsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLLibraryText>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryTextsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/texts/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedHTMLLibraryTextToJSON(requestParameters['patchedHTMLLibraryText']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLLibraryTextFromJSON(jsonValue));
    }

    /**
     * HTML Libraries Texts
     * Partial Update
     */
    async coreHtmlLibraryTextsPartialUpdate(requestParameters: CoreHtmlLibraryTextsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLLibraryText> {
        const response = await this.coreHtmlLibraryTextsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Libraries Texts
     * Retrieve
     */
    async coreHtmlLibraryTextsRetrieveRaw(requestParameters: CoreHtmlLibraryTextsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLLibraryText>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryTextsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/texts/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLLibraryTextFromJSON(jsonValue));
    }

    /**
     * HTML Libraries Texts
     * Retrieve
     */
    async coreHtmlLibraryTextsRetrieve(requestParameters: CoreHtmlLibraryTextsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLLibraryText> {
        const response = await this.coreHtmlLibraryTextsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Libraries Texts
     * Update
     */
    async coreHtmlLibraryTextsUpdateRaw(requestParameters: CoreHtmlLibraryTextsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLLibraryText>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryTextsUpdate().'
            );
        }

        if (requestParameters['hTMLLibraryText'] == null) {
            throw new runtime.RequiredError(
                'hTMLLibraryText',
                'Required parameter "hTMLLibraryText" was null or undefined when calling coreHtmlLibraryTextsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/texts/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HTMLLibraryTextToJSON(requestParameters['hTMLLibraryText']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLLibraryTextFromJSON(jsonValue));
    }

    /**
     * HTML Libraries Texts
     * Update
     */
    async coreHtmlLibraryTextsUpdate(requestParameters: CoreHtmlLibraryTextsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLLibraryText> {
        const response = await this.coreHtmlLibraryTextsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
