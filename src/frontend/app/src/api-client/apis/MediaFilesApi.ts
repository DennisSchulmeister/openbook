/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MediaFile,
  PaginatedMediaFileListList,
  PatchedMediaFile,
} from '../models/index';
import {
    MediaFileFromJSON,
    MediaFileToJSON,
    PaginatedMediaFileListListFromJSON,
    PaginatedMediaFileListListToJSON,
    PatchedMediaFileFromJSON,
    PatchedMediaFileToJSON,
} from '../models/index';

export interface CoreMediaFilesCreateRequest {
    mediaFile: MediaFile;
}

export interface CoreMediaFilesDestroyRequest {
    id: string;
}

export interface CoreMediaFilesListRequest {
    page?: number;
    pageSize?: number;
    search?: string;
    sort?: string;
    contentType?: number;
    fileName?: string;
    fileSize?: number;
    mimeType?: string;
    objectId?: string;
}

export interface CoreMediaFilesPartialUpdateRequest {
    id: string;
    patchedMediaFile?: PatchedMediaFile;
}

export interface CoreMediaFilesRetrieveRequest {
    id: string;
}

export interface CoreMediaFilesUpdateRequest {
    id: string;
    mediaFile: MediaFile;
}

/**
 * 
 */
export class MediaFilesApi extends runtime.BaseAPI {

    /**
     * Attached Media Files
     * Create
     */
    async coreMediaFilesCreateRaw(requestParameters: CoreMediaFilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaFile>> {
        if (requestParameters['mediaFile'] == null) {
            throw new runtime.RequiredError(
                'mediaFile',
                'Required parameter "mediaFile" was null or undefined when calling coreMediaFilesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/core/media_files/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MediaFileToJSON(requestParameters['mediaFile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFileFromJSON(jsonValue));
    }

    /**
     * Attached Media Files
     * Create
     */
    async coreMediaFilesCreate(requestParameters: CoreMediaFilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaFile> {
        const response = await this.coreMediaFilesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attached Media Files
     * Delete
     */
    async coreMediaFilesDestroyRaw(requestParameters: CoreMediaFilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreMediaFilesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/core/media_files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Attached Media Files
     * Delete
     */
    async coreMediaFilesDestroy(requestParameters: CoreMediaFilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.coreMediaFilesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Attached Media Files
     * List
     */
    async coreMediaFilesListRaw(requestParameters: CoreMediaFilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedMediaFileListList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['_page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['_page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['file_name'] = requestParameters['fileName'];
        }

        if (requestParameters['fileSize'] != null) {
            queryParameters['file_size'] = requestParameters['fileSize'];
        }

        if (requestParameters['mimeType'] != null) {
            queryParameters['mime_type'] = requestParameters['mimeType'];
        }

        if (requestParameters['objectId'] != null) {
            queryParameters['object_id'] = requestParameters['objectId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/core/media_files/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedMediaFileListListFromJSON(jsonValue));
    }

    /**
     * Attached Media Files
     * List
     */
    async coreMediaFilesList(requestParameters: CoreMediaFilesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedMediaFileListList> {
        const response = await this.coreMediaFilesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attached Media Files
     * Partial Update
     */
    async coreMediaFilesPartialUpdateRaw(requestParameters: CoreMediaFilesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreMediaFilesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/core/media_files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedMediaFileToJSON(requestParameters['patchedMediaFile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFileFromJSON(jsonValue));
    }

    /**
     * Attached Media Files
     * Partial Update
     */
    async coreMediaFilesPartialUpdate(requestParameters: CoreMediaFilesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaFile> {
        const response = await this.coreMediaFilesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attached Media Files
     * Retrieve
     */
    async coreMediaFilesRetrieveRaw(requestParameters: CoreMediaFilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreMediaFilesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/core/media_files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFileFromJSON(jsonValue));
    }

    /**
     * Attached Media Files
     * Retrieve
     */
    async coreMediaFilesRetrieve(requestParameters: CoreMediaFilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaFile> {
        const response = await this.coreMediaFilesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attached Media Files
     * Update
     */
    async coreMediaFilesUpdateRaw(requestParameters: CoreMediaFilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreMediaFilesUpdate().'
            );
        }

        if (requestParameters['mediaFile'] == null) {
            throw new runtime.RequiredError(
                'mediaFile',
                'Required parameter "mediaFile" was null or undefined when calling coreMediaFilesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/core/media_files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MediaFileToJSON(requestParameters['mediaFile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFileFromJSON(jsonValue));
    }

    /**
     * Attached Media Files
     * Update
     */
    async coreMediaFilesUpdate(requestParameters: CoreMediaFilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaFile> {
        const response = await this.coreMediaFilesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
