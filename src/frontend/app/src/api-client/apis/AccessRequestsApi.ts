/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccessRequest,
  PaginatedAccessRequestList,
  PatchedAccessRequest,
} from '../models/index';
import {
    AccessRequestFromJSON,
    AccessRequestToJSON,
    PaginatedAccessRequestListFromJSON,
    PaginatedAccessRequestListToJSON,
    PatchedAccessRequestFromJSON,
    PatchedAccessRequestToJSON,
} from '../models/index';

export interface AuthAccessRequestsAcceptRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface AuthAccessRequestsCreateRequest {
    accessRequest: Omit<AccessRequest, 'id'|'decision_date'|'created_by'|'created_at'|'modified_by'|'modified_at'>;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface AuthAccessRequestsDenyRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface AuthAccessRequestsDestroyRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface AuthAccessRequestsListRequest {
    expand?: string;
    fields?: string;
    omit?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    sort?: string;
    createdAt?: Date;
    createdAtGte?: Date;
    createdAtLte?: Date;
    createdBy?: string;
    decision?: AuthAccessRequestsListDecisionEnum;
    decisionDate?: Date;
    decisionDateGte?: Date;
    decisionDateLte?: Date;
    modifiedAt?: Date;
    modifiedAtGte?: Date;
    modifiedAtLte?: Date;
    modifiedBy?: string;
    role?: string;
    scopeType?: number;
    scopeUuid?: string;
    user?: string;
}

export interface AuthAccessRequestsPartialUpdateRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
    patchedAccessRequest?: Omit<PatchedAccessRequest, 'id'|'decision_date'|'created_by'|'created_at'|'modified_by'|'modified_at'>;
}

export interface AuthAccessRequestsRetrieveRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface AuthAccessRequestsUpdateRequest {
    id: string;
    accessRequest: Omit<AccessRequest, 'id'|'decision_date'|'created_by'|'created_at'|'modified_by'|'modified_at'>;
    expand?: string;
    fields?: string;
    omit?: string;
}

/**
 * 
 */
export class AccessRequestsApi extends runtime.BaseAPI {

    /**
     * Accept request.
     * Accept
     */
    async authAccessRequestsAcceptRaw(requestParameters: AuthAccessRequestsAcceptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessRequest>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAccessRequestsAccept().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/access_requests/{id}/accept/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessRequestFromJSON(jsonValue));
    }

    /**
     * Accept request.
     * Accept
     */
    async authAccessRequestsAccept(requestParameters: AuthAccessRequestsAcceptRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessRequest> {
        const response = await this.authAccessRequestsAcceptRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Access requests to get a scoped role assigned
     * Create
     */
    async authAccessRequestsCreateRaw(requestParameters: AuthAccessRequestsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessRequest>> {
        if (requestParameters['accessRequest'] == null) {
            throw new runtime.RequiredError(
                'accessRequest',
                'Required parameter "accessRequest" was null or undefined when calling authAccessRequestsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/access_requests/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccessRequestToJSON(requestParameters['accessRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessRequestFromJSON(jsonValue));
    }

    /**
     * Access requests to get a scoped role assigned
     * Create
     */
    async authAccessRequestsCreate(requestParameters: AuthAccessRequestsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessRequest> {
        const response = await this.authAccessRequestsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deny request.
     * Deny
     */
    async authAccessRequestsDenyRaw(requestParameters: AuthAccessRequestsDenyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessRequest>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAccessRequestsDeny().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/access_requests/{id}/deny/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessRequestFromJSON(jsonValue));
    }

    /**
     * Deny request.
     * Deny
     */
    async authAccessRequestsDeny(requestParameters: AuthAccessRequestsDenyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessRequest> {
        const response = await this.authAccessRequestsDenyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Access requests to get a scoped role assigned
     * Delete
     */
    async authAccessRequestsDestroyRaw(requestParameters: AuthAccessRequestsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAccessRequestsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/access_requests/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Access requests to get a scoped role assigned
     * Delete
     */
    async authAccessRequestsDestroy(requestParameters: AuthAccessRequestsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authAccessRequestsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Access requests to get a scoped role assigned
     * List
     */
    async authAccessRequestsListRaw(requestParameters: AuthAccessRequestsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAccessRequestList>> {
        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['_page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['_page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (requestParameters['createdAtGte'] != null) {
            queryParameters['created_at__gte'] = (requestParameters['createdAtGte'] as any).toISOString();
        }

        if (requestParameters['createdAtLte'] != null) {
            queryParameters['created_at__lte'] = (requestParameters['createdAtLte'] as any).toISOString();
        }

        if (requestParameters['createdBy'] != null) {
            queryParameters['created_by'] = requestParameters['createdBy'];
        }

        if (requestParameters['decision'] != null) {
            queryParameters['decision'] = requestParameters['decision'];
        }

        if (requestParameters['decisionDate'] != null) {
            queryParameters['decision_date'] = (requestParameters['decisionDate'] as any).toISOString();
        }

        if (requestParameters['decisionDateGte'] != null) {
            queryParameters['decision_date__gte'] = (requestParameters['decisionDateGte'] as any).toISOString();
        }

        if (requestParameters['decisionDateLte'] != null) {
            queryParameters['decision_date__lte'] = (requestParameters['decisionDateLte'] as any).toISOString();
        }

        if (requestParameters['modifiedAt'] != null) {
            queryParameters['modified_at'] = (requestParameters['modifiedAt'] as any).toISOString();
        }

        if (requestParameters['modifiedAtGte'] != null) {
            queryParameters['modified_at__gte'] = (requestParameters['modifiedAtGte'] as any).toISOString();
        }

        if (requestParameters['modifiedAtLte'] != null) {
            queryParameters['modified_at__lte'] = (requestParameters['modifiedAtLte'] as any).toISOString();
        }

        if (requestParameters['modifiedBy'] != null) {
            queryParameters['modified_by'] = requestParameters['modifiedBy'];
        }

        if (requestParameters['role'] != null) {
            queryParameters['role'] = requestParameters['role'];
        }

        if (requestParameters['scopeType'] != null) {
            queryParameters['scope_type'] = requestParameters['scopeType'];
        }

        if (requestParameters['scopeUuid'] != null) {
            queryParameters['scope_uuid'] = requestParameters['scopeUuid'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/access_requests/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAccessRequestListFromJSON(jsonValue));
    }

    /**
     * Access requests to get a scoped role assigned
     * List
     */
    async authAccessRequestsList(requestParameters: AuthAccessRequestsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAccessRequestList> {
        const response = await this.authAccessRequestsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Access requests to get a scoped role assigned
     * Partial Update
     */
    async authAccessRequestsPartialUpdateRaw(requestParameters: AuthAccessRequestsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessRequest>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAccessRequestsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/access_requests/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAccessRequestToJSON(requestParameters['patchedAccessRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessRequestFromJSON(jsonValue));
    }

    /**
     * Access requests to get a scoped role assigned
     * Partial Update
     */
    async authAccessRequestsPartialUpdate(requestParameters: AuthAccessRequestsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessRequest> {
        const response = await this.authAccessRequestsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Access requests to get a scoped role assigned
     * Retrieve
     */
    async authAccessRequestsRetrieveRaw(requestParameters: AuthAccessRequestsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessRequest>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAccessRequestsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/access_requests/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessRequestFromJSON(jsonValue));
    }

    /**
     * Access requests to get a scoped role assigned
     * Retrieve
     */
    async authAccessRequestsRetrieve(requestParameters: AuthAccessRequestsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessRequest> {
        const response = await this.authAccessRequestsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Access requests to get a scoped role assigned
     * Update
     */
    async authAccessRequestsUpdateRaw(requestParameters: AuthAccessRequestsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccessRequest>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAccessRequestsUpdate().'
            );
        }

        if (requestParameters['accessRequest'] == null) {
            throw new runtime.RequiredError(
                'accessRequest',
                'Required parameter "accessRequest" was null or undefined when calling authAccessRequestsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/access_requests/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AccessRequestToJSON(requestParameters['accessRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccessRequestFromJSON(jsonValue));
    }

    /**
     * Access requests to get a scoped role assigned
     * Update
     */
    async authAccessRequestsUpdate(requestParameters: AuthAccessRequestsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccessRequest> {
        const response = await this.authAccessRequestsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const AuthAccessRequestsListDecisionEnum = {
    Accepted: 'accepted',
    Denied: 'denied',
    Pending: 'pending'
} as const;
export type AuthAccessRequestsListDecisionEnum = typeof AuthAccessRequestsListDecisionEnum[keyof typeof AuthAccessRequestsListDecisionEnum];
