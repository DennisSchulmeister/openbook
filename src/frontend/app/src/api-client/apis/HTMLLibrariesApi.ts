/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTMLLibrary,
  PaginatedHTMLLibraryList,
  PatchedHTMLLibrary,
} from '../models/index';
import {
    HTMLLibraryFromJSON,
    HTMLLibraryToJSON,
    PaginatedHTMLLibraryListFromJSON,
    PaginatedHTMLLibraryListToJSON,
    PatchedHTMLLibraryFromJSON,
    PatchedHTMLLibraryToJSON,
} from '../models/index';

export interface CoreHtmlLibraryLibrariesCreateRequest {
    hTMLLibrary: Omit<HTMLLibrary, 'id'|'fqn'|'created_at'|'modified_at'>;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface CoreHtmlLibraryLibrariesDestroyRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface CoreHtmlLibraryLibrariesListRequest {
    expand?: string;
    fields?: string;
    omit?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    sort?: string;
    authorIcontains?: string;
    createdAt?: Date;
    createdAtGte?: Date;
    createdAtLte?: Date;
    createdBy?: number;
    licenseIcontains?: string;
    modifiedAt?: Date;
    modifiedAtGte?: Date;
    modifiedAtLte?: Date;
    modifiedBy?: number;
    nameIcontains?: string;
    organizationIcontains?: string;
    published?: boolean;
}

export interface CoreHtmlLibraryLibrariesPartialUpdateRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
    patchedHTMLLibrary?: Omit<PatchedHTMLLibrary, 'id'|'fqn'|'created_at'|'modified_at'>;
}

export interface CoreHtmlLibraryLibrariesRetrieveRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface CoreHtmlLibraryLibrariesUpdateRequest {
    id: string;
    hTMLLibrary: Omit<HTMLLibrary, 'id'|'fqn'|'created_at'|'modified_at'>;
    expand?: string;
    fields?: string;
    omit?: string;
}

/**
 * 
 */
export class HTMLLibrariesApi extends runtime.BaseAPI {

    /**
     * HTML Libraries
     * Create
     */
    async coreHtmlLibraryLibrariesCreateRaw(requestParameters: CoreHtmlLibraryLibrariesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLLibrary>> {
        if (requestParameters['hTMLLibrary'] == null) {
            throw new runtime.RequiredError(
                'hTMLLibrary',
                'Required parameter "hTMLLibrary" was null or undefined when calling coreHtmlLibraryLibrariesCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/libraries/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HTMLLibraryToJSON(requestParameters['hTMLLibrary']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLLibraryFromJSON(jsonValue));
    }

    /**
     * HTML Libraries
     * Create
     */
    async coreHtmlLibraryLibrariesCreate(requestParameters: CoreHtmlLibraryLibrariesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLLibrary> {
        const response = await this.coreHtmlLibraryLibrariesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Libraries
     * Delete
     */
    async coreHtmlLibraryLibrariesDestroyRaw(requestParameters: CoreHtmlLibraryLibrariesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryLibrariesDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/libraries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * HTML Libraries
     * Delete
     */
    async coreHtmlLibraryLibrariesDestroy(requestParameters: CoreHtmlLibraryLibrariesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.coreHtmlLibraryLibrariesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * HTML Libraries
     * List
     */
    async coreHtmlLibraryLibrariesListRaw(requestParameters: CoreHtmlLibraryLibrariesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedHTMLLibraryList>> {
        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['_page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['_page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['authorIcontains'] != null) {
            queryParameters['author__icontains'] = requestParameters['authorIcontains'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (requestParameters['createdAtGte'] != null) {
            queryParameters['created_at__gte'] = (requestParameters['createdAtGte'] as any).toISOString();
        }

        if (requestParameters['createdAtLte'] != null) {
            queryParameters['created_at__lte'] = (requestParameters['createdAtLte'] as any).toISOString();
        }

        if (requestParameters['createdBy'] != null) {
            queryParameters['created_by'] = requestParameters['createdBy'];
        }

        if (requestParameters['licenseIcontains'] != null) {
            queryParameters['license__icontains'] = requestParameters['licenseIcontains'];
        }

        if (requestParameters['modifiedAt'] != null) {
            queryParameters['modified_at'] = (requestParameters['modifiedAt'] as any).toISOString();
        }

        if (requestParameters['modifiedAtGte'] != null) {
            queryParameters['modified_at__gte'] = (requestParameters['modifiedAtGte'] as any).toISOString();
        }

        if (requestParameters['modifiedAtLte'] != null) {
            queryParameters['modified_at__lte'] = (requestParameters['modifiedAtLte'] as any).toISOString();
        }

        if (requestParameters['modifiedBy'] != null) {
            queryParameters['modified_by'] = requestParameters['modifiedBy'];
        }

        if (requestParameters['nameIcontains'] != null) {
            queryParameters['name__icontains'] = requestParameters['nameIcontains'];
        }

        if (requestParameters['organizationIcontains'] != null) {
            queryParameters['organization__icontains'] = requestParameters['organizationIcontains'];
        }

        if (requestParameters['published'] != null) {
            queryParameters['published'] = requestParameters['published'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/libraries/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedHTMLLibraryListFromJSON(jsonValue));
    }

    /**
     * HTML Libraries
     * List
     */
    async coreHtmlLibraryLibrariesList(requestParameters: CoreHtmlLibraryLibrariesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedHTMLLibraryList> {
        const response = await this.coreHtmlLibraryLibrariesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Libraries
     * Partial Update
     */
    async coreHtmlLibraryLibrariesPartialUpdateRaw(requestParameters: CoreHtmlLibraryLibrariesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLLibrary>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryLibrariesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/libraries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedHTMLLibraryToJSON(requestParameters['patchedHTMLLibrary']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLLibraryFromJSON(jsonValue));
    }

    /**
     * HTML Libraries
     * Partial Update
     */
    async coreHtmlLibraryLibrariesPartialUpdate(requestParameters: CoreHtmlLibraryLibrariesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLLibrary> {
        const response = await this.coreHtmlLibraryLibrariesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Libraries
     * Retrieve
     */
    async coreHtmlLibraryLibrariesRetrieveRaw(requestParameters: CoreHtmlLibraryLibrariesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLLibrary>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryLibrariesRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/libraries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLLibraryFromJSON(jsonValue));
    }

    /**
     * HTML Libraries
     * Retrieve
     */
    async coreHtmlLibraryLibrariesRetrieve(requestParameters: CoreHtmlLibraryLibrariesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLLibrary> {
        const response = await this.coreHtmlLibraryLibrariesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Libraries
     * Update
     */
    async coreHtmlLibraryLibrariesUpdateRaw(requestParameters: CoreHtmlLibraryLibrariesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLLibrary>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryLibrariesUpdate().'
            );
        }

        if (requestParameters['hTMLLibrary'] == null) {
            throw new runtime.RequiredError(
                'hTMLLibrary',
                'Required parameter "hTMLLibrary" was null or undefined when calling coreHtmlLibraryLibrariesUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/libraries/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HTMLLibraryToJSON(requestParameters['hTMLLibrary']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLLibraryFromJSON(jsonValue));
    }

    /**
     * HTML Libraries
     * Update
     */
    async coreHtmlLibraryLibrariesUpdate(requestParameters: CoreHtmlLibraryLibrariesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLLibrary> {
        const response = await this.coreHtmlLibraryLibrariesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
