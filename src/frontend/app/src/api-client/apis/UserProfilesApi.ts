/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PaginatedUserReadList,
  PatchedUserDetailsUpdate,
  UserDetailsRead,
  UserDetailsUpdate,
} from '../models/index';
import {
    PaginatedUserReadListFromJSON,
    PaginatedUserReadListToJSON,
    PatchedUserDetailsUpdateFromJSON,
    PatchedUserDetailsUpdateToJSON,
    UserDetailsReadFromJSON,
    UserDetailsReadToJSON,
    UserDetailsUpdateFromJSON,
    UserDetailsUpdateToJSON,
} from '../models/index';

export interface AuthUsersDestroyRequest {
    username: string;
}

export interface AuthUsersListRequest {
    page?: number;
    pageSize?: number;
    search?: string;
    sort?: string;
    email?: string;
    firstName?: string;
    isStaff?: boolean;
    lastName?: string;
    username?: string;
}

export interface AuthUsersPartialUpdateRequest {
    username: string;
    patchedUserDetailsUpdate?: PatchedUserDetailsUpdate;
}

export interface AuthUsersRetrieveRequest {
    username: string;
}

export interface AuthUsersUpdateRequest {
    username: string;
    userDetailsUpdate: UserDetailsUpdate;
}

/**
 * 
 */
export class UserProfilesApi extends runtime.BaseAPI {

    /**
     * User Profiles
     * Delete
     */
    async authUsersDestroyRaw(requestParameters: AuthUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling authUsersDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/users/{username}/`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User Profiles
     * Delete
     */
    async authUsersDestroy(requestParameters: AuthUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authUsersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * User Profiles
     * List
     */
    async authUsersListRaw(requestParameters: AuthUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserReadList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['_page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['_page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['email'] != null) {
            queryParameters['email'] = requestParameters['email'];
        }

        if (requestParameters['firstName'] != null) {
            queryParameters['first_name'] = requestParameters['firstName'];
        }

        if (requestParameters['isStaff'] != null) {
            queryParameters['is_staff'] = requestParameters['isStaff'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['last_name'] = requestParameters['lastName'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserReadListFromJSON(jsonValue));
    }

    /**
     * User Profiles
     * List
     */
    async authUsersList(requestParameters: AuthUsersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserReadList> {
        const response = await this.authUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     * Partial Update
     */
    async authUsersPartialUpdateRaw(requestParameters: AuthUsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsUpdate>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling authUsersPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/users/{username}/`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserDetailsUpdateToJSON(requestParameters['patchedUserDetailsUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsUpdateFromJSON(jsonValue));
    }

    /**
     * User Profiles
     * Partial Update
     */
    async authUsersPartialUpdate(requestParameters: AuthUsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsUpdate> {
        const response = await this.authUsersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     * Retrieve
     */
    async authUsersRetrieveRaw(requestParameters: AuthUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsRead>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling authUsersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/auth/users/{username}/`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsReadFromJSON(jsonValue));
    }

    /**
     * User Profiles
     * Retrieve
     */
    async authUsersRetrieve(requestParameters: AuthUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsRead> {
        const response = await this.authUsersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     * Update
     */
    async authUsersUpdateRaw(requestParameters: AuthUsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDetailsUpdate>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling authUsersUpdate().'
            );
        }

        if (requestParameters['userDetailsUpdate'] == null) {
            throw new runtime.RequiredError(
                'userDetailsUpdate',
                'Required parameter "userDetailsUpdate" was null or undefined when calling authUsersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/auth/users/{username}/`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserDetailsUpdateToJSON(requestParameters['userDetailsUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDetailsUpdateFromJSON(jsonValue));
    }

    /**
     * User Profiles
     * Update
     */
    async authUsersUpdate(requestParameters: AuthUsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDetailsUpdate> {
        const response = await this.authUsersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
