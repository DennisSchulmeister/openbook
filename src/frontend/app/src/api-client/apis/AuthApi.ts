/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CurrentUserResponse,
  PaginatedRoleList,
  PaginatedUserList,
  PatchedRole,
  PatchedUser,
  Role,
  User,
} from '../models/index';
import {
    CurrentUserResponseFromJSON,
    CurrentUserResponseToJSON,
    PaginatedRoleListFromJSON,
    PaginatedRoleListToJSON,
    PaginatedUserListFromJSON,
    PaginatedUserListToJSON,
    PatchedRoleFromJSON,
    PatchedRoleToJSON,
    PatchedUserFromJSON,
    PatchedUserToJSON,
    RoleFromJSON,
    RoleToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface AuthAuthRolesCreateRequest {
    role: Omit<Role, 'id'|'scope_type'|'created_by'|'created_at'|'modified_by'|'modified_at'>;
}

export interface AuthAuthRolesDestroyRequest {
    id: string;
}

export interface AuthAuthRolesListRequest {
    page?: number;
    pageSize?: number;
    search?: string;
    sort?: string;
    createdAt?: Date;
    createdBy?: number;
    id?: string;
    isActive?: boolean;
    modifiedAt?: Date;
    modifiedBy?: number;
    name?: string;
    priority?: number;
    scopeType?: number;
    scopeUuid?: string;
    slug?: string;
}

export interface AuthAuthRolesPartialUpdateRequest {
    id: string;
    patchedRole?: Omit<PatchedRole, 'id'|'scope_type'|'created_by'|'created_at'|'modified_by'|'modified_at'>;
}

export interface AuthAuthRolesRetrieveRequest {
    id: string;
}

export interface AuthAuthRolesUpdateRequest {
    id: string;
    role: Omit<Role, 'id'|'scope_type'|'created_by'|'created_at'|'modified_by'|'modified_at'>;
}

export interface AuthAuthUsersCreateRequest {
    user: User;
}

export interface AuthAuthUsersDestroyRequest {
    id: number;
}

export interface AuthAuthUsersListRequest {
    page?: number;
    pageSize?: number;
    search?: string;
    sort?: string;
    firstName?: string;
    isStaff?: boolean;
    lastName?: string;
    username?: string;
}

export interface AuthAuthUsersPartialUpdateRequest {
    id: number;
    patchedUser?: PatchedUser;
}

export interface AuthAuthUsersRetrieveRequest {
    id: number;
}

export interface AuthAuthUsersUpdateRequest {
    id: number;
    user: User;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * User Roles Within a Scope
     */
    async authAuthRolesCreateRaw(requestParameters: AuthAuthRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling authAuthRolesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/roles/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters['role']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * User Roles Within a Scope
     */
    async authAuthRolesCreate(requestParameters: AuthAuthRolesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.authAuthRolesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Roles Within a Scope
     */
    async authAuthRolesDestroyRaw(requestParameters: AuthAuthRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAuthRolesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/roles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User Roles Within a Scope
     */
    async authAuthRolesDestroy(requestParameters: AuthAuthRolesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authAuthRolesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * User Roles Within a Scope
     */
    async authAuthRolesListRaw(requestParameters: AuthAuthRolesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRoleList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['_page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['_page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['createdAt'] != null) {
            queryParameters['created_at'] = (requestParameters['createdAt'] as any).toISOString();
        }

        if (requestParameters['createdBy'] != null) {
            queryParameters['created_by'] = requestParameters['createdBy'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['isActive'] != null) {
            queryParameters['is_active'] = requestParameters['isActive'];
        }

        if (requestParameters['modifiedAt'] != null) {
            queryParameters['modified_at'] = (requestParameters['modifiedAt'] as any).toISOString();
        }

        if (requestParameters['modifiedBy'] != null) {
            queryParameters['modified_by'] = requestParameters['modifiedBy'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['priority'] != null) {
            queryParameters['priority'] = requestParameters['priority'];
        }

        if (requestParameters['scopeType'] != null) {
            queryParameters['scope_type'] = requestParameters['scopeType'];
        }

        if (requestParameters['scopeUuid'] != null) {
            queryParameters['scope_uuid'] = requestParameters['scopeUuid'];
        }

        if (requestParameters['slug'] != null) {
            queryParameters['slug'] = requestParameters['slug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/roles/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRoleListFromJSON(jsonValue));
    }

    /**
     * User Roles Within a Scope
     */
    async authAuthRolesList(requestParameters: AuthAuthRolesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRoleList> {
        const response = await this.authAuthRolesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Roles Within a Scope
     */
    async authAuthRolesPartialUpdateRaw(requestParameters: AuthAuthRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAuthRolesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/roles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRoleToJSON(requestParameters['patchedRole']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * User Roles Within a Scope
     */
    async authAuthRolesPartialUpdate(requestParameters: AuthAuthRolesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.authAuthRolesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Roles Within a Scope
     */
    async authAuthRolesRetrieveRaw(requestParameters: AuthAuthRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAuthRolesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/roles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * User Roles Within a Scope
     */
    async authAuthRolesRetrieve(requestParameters: AuthAuthRolesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.authAuthRolesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Roles Within a Scope
     */
    async authAuthRolesUpdateRaw(requestParameters: AuthAuthRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Role>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAuthRolesUpdate().'
            );
        }

        if (requestParameters['role'] == null) {
            throw new runtime.RequiredError(
                'role',
                'Required parameter "role" was null or undefined when calling authAuthRolesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/roles/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RoleToJSON(requestParameters['role']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RoleFromJSON(jsonValue));
    }

    /**
     * User Roles Within a Scope
     */
    async authAuthRolesUpdate(requestParameters: AuthAuthRolesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Role> {
        const response = await this.authAuthRolesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     */
    async authAuthUsersCreateRaw(requestParameters: AuthAuthUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling authAuthUsersCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * User Profiles
     */
    async authAuthUsersCreate(requestParameters: AuthAuthUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.authAuthUsersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return information about the currently logged in user or a sentinel response, when the user is not logged in.
     */
    async authAuthUsersCurrentRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentUserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/users/current/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentUserResponseFromJSON(jsonValue));
    }

    /**
     * Return information about the currently logged in user or a sentinel response, when the user is not logged in.
     */
    async authAuthUsersCurrentRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentUserResponse> {
        const response = await this.authAuthUsersCurrentRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     */
    async authAuthUsersDestroyRaw(requestParameters: AuthAuthUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAuthUsersDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User Profiles
     */
    async authAuthUsersDestroy(requestParameters: AuthAuthUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.authAuthUsersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * User Profiles
     */
    async authAuthUsersListRaw(requestParameters: AuthAuthUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserList>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['_page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['_page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['firstName'] != null) {
            queryParameters['first_name'] = requestParameters['firstName'];
        }

        if (requestParameters['isStaff'] != null) {
            queryParameters['is_staff'] = requestParameters['isStaff'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['last_name'] = requestParameters['lastName'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserListFromJSON(jsonValue));
    }

    /**
     * User Profiles
     */
    async authAuthUsersList(requestParameters: AuthAuthUsersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserList> {
        const response = await this.authAuthUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     */
    async authAuthUsersPartialUpdateRaw(requestParameters: AuthAuthUsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAuthUsersPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserToJSON(requestParameters['patchedUser']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * User Profiles
     */
    async authAuthUsersPartialUpdate(requestParameters: AuthAuthUsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.authAuthUsersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     */
    async authAuthUsersRetrieveRaw(requestParameters: AuthAuthUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAuthUsersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * User Profiles
     */
    async authAuthUsersRetrieve(requestParameters: AuthAuthUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.authAuthUsersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     */
    async authAuthUsersUpdateRaw(requestParameters: AuthAuthUsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authAuthUsersUpdate().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling authAuthUsersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/auth/auth/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * User Profiles
     */
    async authAuthUsersUpdate(requestParameters: AuthAuthUsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.authAuthUsersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
