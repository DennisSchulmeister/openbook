/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTMLComponentDefinition,
  PaginatedHTMLComponentDefinitionList,
  PatchedHTMLComponentDefinition,
} from '../models/index';
import {
    HTMLComponentDefinitionFromJSON,
    HTMLComponentDefinitionToJSON,
    PaginatedHTMLComponentDefinitionListFromJSON,
    PaginatedHTMLComponentDefinitionListToJSON,
    PatchedHTMLComponentDefinitionFromJSON,
    PatchedHTMLComponentDefinitionToJSON,
} from '../models/index';

export interface CoreHtmlLibraryComponentDefinitionsCreateRequest {
    hTMLComponentDefinition: Omit<HTMLComponentDefinition, 'id'>;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface CoreHtmlLibraryComponentDefinitionsDestroyRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface CoreHtmlLibraryComponentDefinitionsListRequest {
    expand?: string;
    fields?: string;
    omit?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    sort?: string;
    htmlComponentLibraryAuthorIcontains?: string;
    htmlComponentLibraryNameIcontains?: string;
    htmlComponentLibraryOrganizationIcontains?: string;
    htmlComponentTagNameIcontains?: string;
    libraryVersionVersion?: string;
}

export interface CoreHtmlLibraryComponentDefinitionsPartialUpdateRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
    patchedHTMLComponentDefinition?: Omit<PatchedHTMLComponentDefinition, 'id'>;
}

export interface CoreHtmlLibraryComponentDefinitionsRetrieveRequest {
    id: string;
    expand?: string;
    fields?: string;
    omit?: string;
}

export interface CoreHtmlLibraryComponentDefinitionsUpdateRequest {
    id: string;
    hTMLComponentDefinition: Omit<HTMLComponentDefinition, 'id'>;
    expand?: string;
    fields?: string;
    omit?: string;
}

/**
 * 
 */
export class HTMLComponentDefinitionsApi extends runtime.BaseAPI {

    /**
     * HTML Libraries
     * Create
     */
    async coreHtmlLibraryComponentDefinitionsCreateRaw(requestParameters: CoreHtmlLibraryComponentDefinitionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLComponentDefinition>> {
        if (requestParameters['hTMLComponentDefinition'] == null) {
            throw new runtime.RequiredError(
                'hTMLComponentDefinition',
                'Required parameter "hTMLComponentDefinition" was null or undefined when calling coreHtmlLibraryComponentDefinitionsCreate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/component_definitions/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: HTMLComponentDefinitionToJSON(requestParameters['hTMLComponentDefinition']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLComponentDefinitionFromJSON(jsonValue));
    }

    /**
     * HTML Libraries
     * Create
     */
    async coreHtmlLibraryComponentDefinitionsCreate(requestParameters: CoreHtmlLibraryComponentDefinitionsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLComponentDefinition> {
        const response = await this.coreHtmlLibraryComponentDefinitionsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Libraries
     * Delete
     */
    async coreHtmlLibraryComponentDefinitionsDestroyRaw(requestParameters: CoreHtmlLibraryComponentDefinitionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryComponentDefinitionsDestroy().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/component_definitions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * HTML Libraries
     * Delete
     */
    async coreHtmlLibraryComponentDefinitionsDestroy(requestParameters: CoreHtmlLibraryComponentDefinitionsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.coreHtmlLibraryComponentDefinitionsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * HTML Libraries
     * List
     */
    async coreHtmlLibraryComponentDefinitionsListRaw(requestParameters: CoreHtmlLibraryComponentDefinitionsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedHTMLComponentDefinitionList>> {
        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['_page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['_page_size'] = requestParameters['pageSize'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['htmlComponentLibraryAuthorIcontains'] != null) {
            queryParameters['html_component__library__author__icontains'] = requestParameters['htmlComponentLibraryAuthorIcontains'];
        }

        if (requestParameters['htmlComponentLibraryNameIcontains'] != null) {
            queryParameters['html_component__library__name__icontains'] = requestParameters['htmlComponentLibraryNameIcontains'];
        }

        if (requestParameters['htmlComponentLibraryOrganizationIcontains'] != null) {
            queryParameters['html_component__library__organization__icontains'] = requestParameters['htmlComponentLibraryOrganizationIcontains'];
        }

        if (requestParameters['htmlComponentTagNameIcontains'] != null) {
            queryParameters['html_component__tag_name__icontains'] = requestParameters['htmlComponentTagNameIcontains'];
        }

        if (requestParameters['libraryVersionVersion'] != null) {
            queryParameters['library_version__version'] = requestParameters['libraryVersionVersion'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/component_definitions/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedHTMLComponentDefinitionListFromJSON(jsonValue));
    }

    /**
     * HTML Libraries
     * List
     */
    async coreHtmlLibraryComponentDefinitionsList(requestParameters: CoreHtmlLibraryComponentDefinitionsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedHTMLComponentDefinitionList> {
        const response = await this.coreHtmlLibraryComponentDefinitionsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Libraries
     * Partial Update
     */
    async coreHtmlLibraryComponentDefinitionsPartialUpdateRaw(requestParameters: CoreHtmlLibraryComponentDefinitionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLComponentDefinition>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryComponentDefinitionsPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/component_definitions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedHTMLComponentDefinitionToJSON(requestParameters['patchedHTMLComponentDefinition']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLComponentDefinitionFromJSON(jsonValue));
    }

    /**
     * HTML Libraries
     * Partial Update
     */
    async coreHtmlLibraryComponentDefinitionsPartialUpdate(requestParameters: CoreHtmlLibraryComponentDefinitionsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLComponentDefinition> {
        const response = await this.coreHtmlLibraryComponentDefinitionsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Libraries
     * Retrieve
     */
    async coreHtmlLibraryComponentDefinitionsRetrieveRaw(requestParameters: CoreHtmlLibraryComponentDefinitionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLComponentDefinition>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryComponentDefinitionsRetrieve().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/component_definitions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLComponentDefinitionFromJSON(jsonValue));
    }

    /**
     * HTML Libraries
     * Retrieve
     */
    async coreHtmlLibraryComponentDefinitionsRetrieve(requestParameters: CoreHtmlLibraryComponentDefinitionsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLComponentDefinition> {
        const response = await this.coreHtmlLibraryComponentDefinitionsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * HTML Libraries
     * Update
     */
    async coreHtmlLibraryComponentDefinitionsUpdateRaw(requestParameters: CoreHtmlLibraryComponentDefinitionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HTMLComponentDefinition>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreHtmlLibraryComponentDefinitionsUpdate().'
            );
        }

        if (requestParameters['hTMLComponentDefinition'] == null) {
            throw new runtime.RequiredError(
                'hTMLComponentDefinition',
                'Required parameter "hTMLComponentDefinition" was null or undefined when calling coreHtmlLibraryComponentDefinitionsUpdate().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['expand'] != null) {
            queryParameters['_expand'] = requestParameters['expand'];
        }

        if (requestParameters['fields'] != null) {
            queryParameters['_fields'] = requestParameters['fields'];
        }

        if (requestParameters['omit'] != null) {
            queryParameters['_omit'] = requestParameters['omit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/core/html_library/component_definitions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: HTMLComponentDefinitionToJSON(requestParameters['hTMLComponentDefinition']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HTMLComponentDefinitionFromJSON(jsonValue));
    }

    /**
     * HTML Libraries
     * Update
     */
    async coreHtmlLibraryComponentDefinitionsUpdate(requestParameters: CoreHtmlLibraryComponentDefinitionsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HTMLComponentDefinition> {
        const response = await this.coreHtmlLibraryComponentDefinitionsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
