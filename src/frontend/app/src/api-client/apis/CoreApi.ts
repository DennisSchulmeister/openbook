/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CurrentUserResponse,
  HealthResponse,
  Language,
  MediaFile,
  PaginatedLanguageList,
  PaginatedMediaFileList,
  PaginatedSiteList,
  PaginatedUserList,
  PatchedMediaFile,
  PatchedUser,
  Site,
  User,
} from '../models/index';
import {
    CurrentUserResponseFromJSON,
    CurrentUserResponseToJSON,
    HealthResponseFromJSON,
    HealthResponseToJSON,
    LanguageFromJSON,
    LanguageToJSON,
    MediaFileFromJSON,
    MediaFileToJSON,
    PaginatedLanguageListFromJSON,
    PaginatedLanguageListToJSON,
    PaginatedMediaFileListFromJSON,
    PaginatedMediaFileListToJSON,
    PaginatedSiteListFromJSON,
    PaginatedSiteListToJSON,
    PaginatedUserListFromJSON,
    PaginatedUserListToJSON,
    PatchedMediaFileFromJSON,
    PatchedMediaFileToJSON,
    PatchedUserFromJSON,
    PatchedUserToJSON,
    SiteFromJSON,
    SiteToJSON,
    UserFromJSON,
    UserToJSON,
} from '../models/index';

export interface CoreLanguagesListRequest {
    search?: string;
    sort?: string;
    language?: string;
    name?: string;
    page?: number;
}

export interface CoreLanguagesRetrieveRequest {
    language: string;
}

export interface CoreMediaFilesCreateRequest {
    mediaFile: MediaFile;
}

export interface CoreMediaFilesDestroyRequest {
    id: string;
}

export interface CoreMediaFilesListRequest {
    search?: string;
    sort?: string;
    contentType?: number;
    fileName?: string;
    mimeType?: string;
    objectId?: string;
    page?: number;
}

export interface CoreMediaFilesPartialUpdateRequest {
    id: string;
    patchedMediaFile?: PatchedMediaFile;
}

export interface CoreMediaFilesRetrieveRequest {
    id: string;
}

export interface CoreMediaFilesUpdateRequest {
    id: string;
    mediaFile: MediaFile;
}

export interface CoreSitesListRequest {
    search?: string;
    sort?: string;
    domain?: string;
    id?: number;
    page?: number;
}

export interface CoreSitesRetrieveRequest {
    id: number;
}

export interface CoreUsersCreateRequest {
    user: User;
}

export interface CoreUsersDestroyRequest {
    id: number;
}

export interface CoreUsersListRequest {
    search?: string;
    sort?: string;
    firstName?: string;
    isStaff?: boolean;
    lastName?: string;
    page?: number;
    username?: string;
}

export interface CoreUsersPartialUpdateRequest {
    id: number;
    patchedUser?: PatchedUser;
}

export interface CoreUsersRetrieveRequest {
    id: number;
}

export interface CoreUsersUpdateRequest {
    id: number;
    user: User;
}

/**
 * 
 */
export class CoreApi extends runtime.BaseAPI {

    /**
     * Read-only view set to access language codes.
     */
    async coreLanguagesListRaw(requestParameters: CoreLanguagesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLanguageList>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['language'] != null) {
            queryParameters['language'] = requestParameters['language'];
        }

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/languages/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLanguageListFromJSON(jsonValue));
    }

    /**
     * Read-only view set to access language codes.
     */
    async coreLanguagesList(requestParameters: CoreLanguagesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLanguageList> {
        const response = await this.coreLanguagesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Read-only view set to access language codes.
     */
    async coreLanguagesRetrieveRaw(requestParameters: CoreLanguagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Language>> {
        if (requestParameters['language'] == null) {
            throw new runtime.RequiredError(
                'language',
                'Required parameter "language" was null or undefined when calling coreLanguagesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/languages/{language}/`.replace(`{${"language"}}`, encodeURIComponent(String(requestParameters['language']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LanguageFromJSON(jsonValue));
    }

    /**
     * Read-only view set to access language codes.
     */
    async coreLanguagesRetrieve(requestParameters: CoreLanguagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Language> {
        const response = await this.coreLanguagesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attached Media Files
     */
    async coreMediaFilesCreateRaw(requestParameters: CoreMediaFilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaFile>> {
        if (requestParameters['mediaFile'] == null) {
            throw new runtime.RequiredError(
                'mediaFile',
                'Required parameter "mediaFile" was null or undefined when calling coreMediaFilesCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/media-files/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MediaFileToJSON(requestParameters['mediaFile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFileFromJSON(jsonValue));
    }

    /**
     * Attached Media Files
     */
    async coreMediaFilesCreate(requestParameters: CoreMediaFilesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaFile> {
        const response = await this.coreMediaFilesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attached Media Files
     */
    async coreMediaFilesDestroyRaw(requestParameters: CoreMediaFilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreMediaFilesDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/media-files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Attached Media Files
     */
    async coreMediaFilesDestroy(requestParameters: CoreMediaFilesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.coreMediaFilesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Attached Media Files
     */
    async coreMediaFilesListRaw(requestParameters: CoreMediaFilesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedMediaFileList>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['contentType'] != null) {
            queryParameters['content_type'] = requestParameters['contentType'];
        }

        if (requestParameters['fileName'] != null) {
            queryParameters['file_name'] = requestParameters['fileName'];
        }

        if (requestParameters['mimeType'] != null) {
            queryParameters['mime_type'] = requestParameters['mimeType'];
        }

        if (requestParameters['objectId'] != null) {
            queryParameters['object_id'] = requestParameters['objectId'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/media-files/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedMediaFileListFromJSON(jsonValue));
    }

    /**
     * Attached Media Files
     */
    async coreMediaFilesList(requestParameters: CoreMediaFilesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedMediaFileList> {
        const response = await this.coreMediaFilesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attached Media Files
     */
    async coreMediaFilesPartialUpdateRaw(requestParameters: CoreMediaFilesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreMediaFilesPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/media-files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedMediaFileToJSON(requestParameters['patchedMediaFile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFileFromJSON(jsonValue));
    }

    /**
     * Attached Media Files
     */
    async coreMediaFilesPartialUpdate(requestParameters: CoreMediaFilesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaFile> {
        const response = await this.coreMediaFilesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attached Media Files
     */
    async coreMediaFilesRetrieveRaw(requestParameters: CoreMediaFilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreMediaFilesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/media-files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFileFromJSON(jsonValue));
    }

    /**
     * Attached Media Files
     */
    async coreMediaFilesRetrieve(requestParameters: CoreMediaFilesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaFile> {
        const response = await this.coreMediaFilesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Attached Media Files
     */
    async coreMediaFilesUpdateRaw(requestParameters: CoreMediaFilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MediaFile>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreMediaFilesUpdate().'
            );
        }

        if (requestParameters['mediaFile'] == null) {
            throw new runtime.RequiredError(
                'mediaFile',
                'Required parameter "mediaFile" was null or undefined when calling coreMediaFilesUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/media-files/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MediaFileToJSON(requestParameters['mediaFile']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MediaFileFromJSON(jsonValue));
    }

    /**
     * Attached Media Files
     */
    async coreMediaFilesUpdate(requestParameters: CoreMediaFilesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MediaFile> {
        const response = await this.coreMediaFilesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return a simple health status that the API is up and running.
     */
    async coreSitesHealthRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/sites/health/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthResponseFromJSON(jsonValue));
    }

    /**
     * Return a simple health status that the API is up and running.
     */
    async coreSitesHealthRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthResponse> {
        const response = await this.coreSitesHealthRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * General Website Settings
     */
    async coreSitesListRaw(requestParameters: CoreSitesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSiteList>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['domain'] != null) {
            queryParameters['domain'] = requestParameters['domain'];
        }

        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/sites/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSiteListFromJSON(jsonValue));
    }

    /**
     * General Website Settings
     */
    async coreSitesList(requestParameters: CoreSitesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSiteList> {
        const response = await this.coreSitesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * General Website Settings
     */
    async coreSitesRetrieveRaw(requestParameters: CoreSitesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Site>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreSitesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/sites/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteFromJSON(jsonValue));
    }

    /**
     * General Website Settings
     */
    async coreSitesRetrieve(requestParameters: CoreSitesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Site> {
        const response = await this.coreSitesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     */
    async coreUsersCreateRaw(requestParameters: CoreUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling coreUsersCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * User Profiles
     */
    async coreUsersCreate(requestParameters: CoreUsersCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.coreUsersCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return information about the currently logged in user or a sentinel response, when the user is not logged in.
     */
    async coreUsersCurrentRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurrentUserResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/users/current/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurrentUserResponseFromJSON(jsonValue));
    }

    /**
     * Return information about the currently logged in user or a sentinel response, when the user is not logged in.
     */
    async coreUsersCurrentRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurrentUserResponse> {
        const response = await this.coreUsersCurrentRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     */
    async coreUsersDestroyRaw(requestParameters: CoreUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreUsersDestroy().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User Profiles
     */
    async coreUsersDestroy(requestParameters: CoreUsersDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.coreUsersDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * User Profiles
     */
    async coreUsersListRaw(requestParameters: CoreUsersListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserList>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['_search'] = requestParameters['search'];
        }

        if (requestParameters['sort'] != null) {
            queryParameters['_sort'] = requestParameters['sort'];
        }

        if (requestParameters['firstName'] != null) {
            queryParameters['first_name'] = requestParameters['firstName'];
        }

        if (requestParameters['isStaff'] != null) {
            queryParameters['is_staff'] = requestParameters['isStaff'];
        }

        if (requestParameters['lastName'] != null) {
            queryParameters['last_name'] = requestParameters['lastName'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserListFromJSON(jsonValue));
    }

    /**
     * User Profiles
     */
    async coreUsersList(requestParameters: CoreUsersListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserList> {
        const response = await this.coreUsersListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     */
    async coreUsersPartialUpdateRaw(requestParameters: CoreUsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreUsersPartialUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserToJSON(requestParameters['patchedUser']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * User Profiles
     */
    async coreUsersPartialUpdate(requestParameters: CoreUsersPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.coreUsersPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     */
    async coreUsersRetrieveRaw(requestParameters: CoreUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreUsersRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * User Profiles
     */
    async coreUsersRetrieve(requestParameters: CoreUsersRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.coreUsersRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User Profiles
     */
    async coreUsersUpdateRaw(requestParameters: CoreUsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling coreUsersUpdate().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling coreUsersUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/api/core/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters['user']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * User Profiles
     */
    async coreUsersUpdate(requestParameters: CoreUsersUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.coreUsersUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
