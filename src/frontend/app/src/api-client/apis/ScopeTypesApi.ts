/* tslint:disable */
/* eslint-disable */
/**
 * OpenBook API
 * Beautiful and Engaging Learning Materials
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ScopeTypeList,
  ScopeTypeRetrieve,
} from '../models/index';
import {
    ScopeTypeListFromJSON,
    ScopeTypeListToJSON,
    ScopeTypeRetrieveFromJSON,
    ScopeTypeRetrieveToJSON,
} from '../models/index';

export interface AuthScopeTypesRetrieveRequest {
    id: string;
}

/**
 * 
 */
export class ScopeTypesApi extends runtime.BaseAPI {

    /**
     * GET List: Return a flat list of scope types.
     * List
     */
    async authScopeTypesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ScopeTypeList>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/scope_types/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ScopeTypeListFromJSON));
    }

    /**
     * GET List: Return a flat list of scope types.
     * List
     */
    async authScopeTypesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ScopeTypeList>> {
        const response = await this.authScopeTypesListRaw(initOverrides);
        return await response.value();
    }

    /**
     * GET Scope Type: Return an object with all scopes and allowed permissions.
     * Retrieve
     */
    async authScopeTypesRetrieveRaw(requestParameters: AuthScopeTypesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScopeTypeRetrieve>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling authScopeTypesRetrieve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["sessionId"] = await this.configuration.apiKey("sessionId"); // SessionAuthentication authentication
        }

        const response = await this.request({
            path: `/api/auth/scope_types/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScopeTypeRetrieveFromJSON(jsonValue));
    }

    /**
     * GET Scope Type: Return an object with all scopes and allowed permissions.
     * Retrieve
     */
    async authScopeTypesRetrieve(requestParameters: AuthScopeTypesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScopeTypeRetrieve> {
        const response = await this.authScopeTypesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
